.version 7.5
.target sm_86

.visible .entry gemm4x4(
    .param .u64 gemm4x4_param_0,  // Pointer to matrix A
    .param .u64 gemm4x4_param_1,  // Pointer to matrix B
    .param .u64 gemm4x4_param_2   // Pointer to matrix C
)
{
    .reg .f32   %f<20>;
    .reg .u32   %r<4>;
    .reg .u64   %rd<4>;

    ld.param.u64    %rd1, [gemm4x4_param_0];
    ld.param.u64    %rd2, [gemm4x4_param_1];
    ld.param.u64    %rd3, [gemm4x4_param_2];

    // Initialize accumulator registers
    mov.f32         %f1, 0f00000000;
    mov.f32         %f2, 0f00000000;
    mov.f32         %f3, 0f00000000;
    mov.f32         %f4, 0f00000000;
    mov.f32         %f5, 0f00000000;
    mov.f32         %f6, 0f00000000;
    mov.f32         %f7, 0f00000000;
    mov.f32         %f8, 0f00000000;
    mov.f32         %f9, 0f00000000;
    mov.f32         %f10, 0f00000000;
    mov.f32         %f11, 0f00000000;
    mov.f32         %f12, 0f00000000;
    mov.f32         %f13, 0f00000000;
    mov.f32         %f14, 0f00000000;
    mov.f32         %f15, 0f00000000;
    mov.f32         %f16, 0f00000000;

    mov.u32         %r1, 0;

LOOP_K:
    // Load row of A and column of B
    ld.global.f32   %f17, [%rd1];
    ld.global.f32   %f18, [%rd2];

    fma.rn.f32      %f1, %f17, %f18, %f1;
    ld.global.f32   %f18, [%rd2+4];
    fma.rn.f32      %f2, %f17, %f18, %f2;
    ld.global.f32   %f18, [%rd2+8];
    fma.rn.f32      %f3, %f17, %f18, %f3;
    ld.global.f32   %f18, [%rd2+12];
    fma.rn.f32      %f4, %f17, %f18, %f4;

    ld.global.f32   %f17, [%rd1+4];
    ld.global.f32   %f18, [%rd2+16];
    fma.rn.f32      %f5, %f17, %f18, %f5;
    ld.global.f32   %f18, [%rd2+20];
    fma.rn.f32      %f6, %f17, %f18, %f6;
    ld.global.f32   %f18, [%rd2+24];
    fma.rn.f32      %f7, %f17, %f18, %f7;
    ld.global.f32   %f18, [%rd2+28];
    fma.rn.f32      %f8, %f17, %f18, %f8;

    ld.global.f32   %f17, [%rd1+8];
    ld.global.f32   %f18, [%rd2+32];
    fma.rn.f32      %f9, %f17, %f18, %f9;
    ld.global.f32   %f18, [%rd2+36];
    fma.rn.f32      %f10, %f17, %f18, %f10;
    ld.global.f32   %f18, [%rd2+40];
    fma.rn.f32      %f11, %f17, %f18, %f11;
    ld.global.f32   %f18, [%rd2+44];
    fma.rn.f32      %f12, %f17, %f18, %f12;

    ld.global.f32   %f17, [%rd1+12];
    ld.global.f32   %f18, [%rd2+48];
    fma.rn.f32      %f13, %f17, %f18, %f13;
    ld.global.f32   %f18, [%rd2+52];
    fma.rn.f32      %f14, %f17, %f18, %f14;
    ld.global.f32   %f18, [%rd2+56];
    fma.rn.f32      %f15, %f17, %f18, %f15;
    ld.global.f32   %f18, [%rd2+60];
    fma.rn.f32      %f16, %f17, %f18, %f16;

    add.u64         %rd1, %rd1, 16;
    add.u64         %rd2, %rd2, 4;

    add.u32         %r1, %r1, 1;
    setp.lt.u32     %p1, %r1, 4;
    @%p1 bra        LOOP_K;

    // Store results back to matrix C
    st.global.f32   [%rd3], %f1;
    st.global.f32   [%rd3+4], %f2;
    st.global.f32   [%rd3+8], %f3;
    st.global.f32   [%rd3+12], %f4;
    st.global.f32   [%rd3+16], %f5;
    st.global.f32   [%rd3+20], %f6;
    st.global.f32   [%rd3+24], %f7;
    st.global.f32   [%rd3+28], %f8;
    st.global.f32   [%rd3+32], %f9;
    st.global.f32   [%rd3+36], %f10;
    st.global.f32   [%rd3+40], %f11;
    st.global.f32   [%rd3+44], %f12;
    st.global.f32   [%rd3+48], %f13;
    st.global.f32   [%rd3+52], %f14;
    st.global.f32   [%rd3+56], %f15;
    st.global.f32   [%rd3+60], %f16;

    ret;
}