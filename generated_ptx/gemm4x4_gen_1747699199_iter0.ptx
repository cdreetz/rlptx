.version 7.5
.target sm_86

.visible .entry gemm4x4(
    .param .u64 gemm4x4_param_0,
    .param .u64 gemm4x4_param_1,
    .param .u64 gemm4x4_param_2
)
{
    .reg .f32   %f<20>;
    .reg .u32   %r<8>;
    .reg .u64   %rd<7>;

    ld.param.u64    %rd1, [gemm4x4_param_0];
    ld.param.u64    %rd2, [gemm4x4_param_1];
    ld.param.u64    %rd3, [gemm4x4_param_2];

    mov.u32         %r1, 0;

    // Load matrix A into registers
    ld.global.f32   %f1, [%rd1];
    ld.global.f32   %f2, [%rd1+4];
    ld.global.f32   %f3, [%rd1+8];
    ld.global.f32   %f4, [%rd1+12];
    ld.global.f32   %f5, [%rd1+16];
    ld.global.f32   %f6, [%rd1+20];
    ld.global.f32   %f7, [%rd1+24];
    ld.global.f32   %f8, [%rd1+28];
    ld.global.f32   %f9, [%rd1+32];
    ld.global.f32   %f10, [%rd1+36];
    ld.global.f32   %f11, [%rd1+40];
    ld.global.f32   %f12, [%rd1+44];
    ld.global.f32   %f13, [%rd1+48];
    ld.global.f32   %f14, [%rd1+52];
    ld.global.f32   %f15, [%rd1+56];
    ld.global.f32   %f16, [%rd1+60];

    // Load matrix B into registers
    ld.global.f32   %f17, [%rd2];
    ld.global.f32   %f18, [%rd2+4];
    ld.global.f32   %f19, [%rd2+8];
    ld.global.f32   %f1, [%rd2+12];
    ld.global.f32   %f2, [%rd2+16];
    ld.global.f32   %f3, [%rd2+20];
    ld.global.f32   %f4, [%rd2+24];
    ld.global.f32   %f5, [%rd2+28];
    ld.global.f32   %f6, [%rd2+32];
    ld.global.f32   %f7, [%rd2+36];
    ld.global.f32   %f8, [%rd2+40];
    ld.global.f32   %f9, [%rd2+44];
    ld.global.f32   %f10, [%rd2+48];
    ld.global.f32   %f11, [%rd2+52];
    ld.global.f32   %f12, [%rd2+56];
    ld.global.f32   %f13, [%rd2+60];

    // Initialize accumulator registers
    mov.f32         %f14, 0f00000000;
    mov.f32         %f15, 0f00000000;
    mov.f32         %f1, 0f00000000;
    mov.f32         %f2, 0f00000000;
    mov.f32         %f3, 0f00000000;
    mov.f32         %f4, 0f00000000;
    mov.f32         %f5, 0f00000000;
    mov.f32         %f6, 0f00000000;
    mov.f32         %f7, 0f00000000;
    mov.f32         %f8, 0f00000000;
    mov.f32         %f9, 0f00000000;
    mov.f32         %f10, 0f00000000;
    mov.f32         %f11, 0f00000000;
    mov.f32         %f12, 0f00000000;
    mov.f32         %f13, 0f00000000;

    // Perform matrix multiplication using FMA instructions
    fma.rn.f32      %f14, %f1, %f17, %f14;
    fma.rn.f32      %f15, %f2, %f17, %f15;
    fma.rn.f32      %f1, %f3, %f17, %f1;
    fma.rn.f32      %f2, %f4, %f17, %f2;
    fma.rn.f32      %f3, %f5, %f18, %f3;
    fma.rn.f32      %f4, %f6, %f18, %f4;
    fma.rn.f32      %f5, %f7, %f18, %f5;
    fma.rn.f32      %f6, %f8, %f18, %f6;
    fma.rn.f32      %f7, %f9, %f19, %f7;
    fma.rn.f32      %f8, %f10, %f19, %f8;
    fma.rn.f32      %f9, %f11, %f19, %f9;
    fma.rn.f32      %f10, %f12, %f19, %f10;
    fma.rn.f32      %f11, %f13, %f1, %f11;
    fma.rn.f32      %f12, %f14, %f1, %f12;
    fma.rn.f32      %f13, %f15, %f1, %f13;
    fma.rn.f32      %f14, %f16, %f1, %f14;

    fma.rn.f32      %f15, %f1, %f2, %f15;
    fma.rn.f32      %f1, %f2, %f2, %f1;
    fma.rn.f32      %f2, %f3, %f2, %f2;
    fma.rn.f32      %f3, %f4, %f2, %f3;
    fma.rn.f32      %f4, %f5, %f3, %f4;
    fma.rn.f32      %f5, %f6, %f3, %f5;
    fma.rn.f32      %f6, %f7, %f3, %f6;
    fma.rn.f32      %f7, %f8, %f3, %f7;
    fma.rn.f32      %f8, %f9, %f4, %f8;
    fma.rn.f32      %f9, %f10, %f4, %f9;
    fma.rn.f32      %f10, %f11, %f4, %f10;
    fma.rn.f32      %f11, %f12, %f4, %f11;
    fma.rn.f32      %f12, %f13, %f5, %f12;
    fma.rn.f32      %f13, %f14, %f5, %f13;
    fma.rn.f32      %f14, %f15, %f5, %f14;
    fma.rn.f32      %f15, %f16, %f5, %f15;

    // Store results back to matrix C
    st.global.f32   [%rd3], %f14;
    st.global.f32   [%rd3+4], %f15;
    st.global.f32   [%rd3+8], %f1;
    st.global.f32   [%rd3+12], %f2;
    st.global.f32   [%rd3+16], %f3;
    st.global.f32   [%rd3+20], %f4;
    st.global.f32   [%rd3+24], %f5;
    st.global.f32   [%rd3+28], %f6;
    st.global.f32   [%rd3+32], %f7;
    st.global.f32   [%rd3+36], %f8;
    st.global.f32   [%rd3+40], %f9;
    st.global.f32   [%rd3+44], %f10;
    st.global.f32   [%rd3+48], %f11;
    st.global.f32   [%rd3+52], %f12;
    st.global.f32   [%rd3+56], %f13;
    st.global.f32   [%rd3+60], %f14;

    ret;
}