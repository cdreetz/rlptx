.version 7.5
.target sm_86
.address_size 64

.visible .entry gemm4x4(
    .param .u64 A,
    .param .u64 B,
    .param .u64 C
)
{
    .reg .f32 a<16>, b<16>, c<16>;
    .reg .u64 a_ptr, b_ptr, c_ptr;
    .reg .u32 i, j, k;
    .reg .u64 offset;
    
    // Load pointers
    ld.param.u64 a_ptr, [A];
    ld.param.u64 b_ptr, [B];
    ld.param.u64 c_ptr, [C];
    
    // Initialize C to zeros
    mov.f32 c0, 0.0;
    mov.f32 c1, 0.0;
    mov.f32 c2, 0.0;
    mov.f32 c3, 0.0;
    mov.f32 c4, 0.0;
    mov.f32 c5, 0.0;
    mov.f32 c6, 0.0;
    mov.f32 c7, 0.0;
    mov.f32 c8, 0.0;
    mov.f32 c9, 0.0;
    mov.f32 c10, 0.0;
    mov.f32 c11, 0.0;
    mov.f32 c12, 0.0;
    mov.f32 c13, 0.0;
    mov.f32 c14, 0.0;
    mov.f32 c15, 0.0;
    
    // Load matrix A (row-major)
    ld.global.f32 a0, [a_ptr];
    ld.global.f32 a1, [a_ptr+4];
    ld.global.f32 a2, [a_ptr+8];
    ld.global.f32 a3, [a_ptr+12];
    ld.global.f32 a4, [a_ptr+16];
    ld.global.f32 a5, [a_ptr+20];
    ld.global.f32 a6, [a_ptr+24];
    ld.global.f32 a7, [a_ptr+28];
    ld.global.f32 a8, [a_ptr+32];
    ld.global.f32 a9, [a_ptr+36];
    ld.global.f32 a10, [a_ptr+40];
    ld.global.f32 a11, [a_ptr+44];
    ld.global.f32 a12, [a_ptr+48];
    ld.global.f32 a13, [a_ptr+52];
    ld.global.f32 a14, [a_ptr+56];
    ld.global.f32 a15, [a_ptr+60];
    
    // Load matrix B (row-major)
    ld.global.f32 b0, [b_ptr];
    ld.global.f32 b1, [b_ptr+4];
    ld.global.f32 b2, [b_ptr+8];
    ld.global.f32 b3, [b_ptr+12];
    ld.global.f32 b4, [b_ptr+16];
    ld.global.f32 b5, [b_ptr+20];
    ld.global.f32 b6, [b_ptr+24];
    ld.global.f32 b7, [b_ptr+28];
    ld.global.f32 b8, [b_ptr+32];
    ld.global.f32 b9, [b_ptr+36];
    ld.global.f32 b10, [b_ptr+40];
    ld.global.f32 b11, [b_ptr+44];
    ld.global.f32 b12, [b_ptr+48];
    ld.global.f32 b13, [b_ptr+52];
    ld.global.f32 b14, [b_ptr+56];
    ld.global.f32 b15, [b_ptr+60];
    
    // Compute C = A * B (naive approach)
    // C[0,0]
    fma.rn.f32 c0, a0, b0, c0;
    fma.rn.f32 c0, a1, b4, c0;
    fma.rn.f32 c0, a2, b8, c0;
    fma.rn.f32 c0, a3, b12, c0;
    
    // C[0,1]
    fma.rn.f32 c1, a0, b1, c1;
    fma.rn.f32 c1, a1, b5, c1;
    fma.rn.f32 c1, a2, b9, c1;
    fma.rn.f32 c1, a3, b13, c1;
    
    // C[0,2]
    fma.rn.f32 c2, a0, b2, c2;
    fma.rn.f32 c2, a1, b6, c2;
    fma.rn.f32 c2, a2, b10, c2;
    fma.rn.f32 c2, a3, b14, c2;
    
    // C[0,3]
    fma.rn.f32 c3, a0, b3, c3;
    fma.rn.f32 c3, a1, b7, c3;
    fma.rn.f32 c3, a2, b11, c3;
    fma.rn.f32 c3, a3, b15, c3;
    
    // C[1,0]
    fma.rn.f32 c4, a4, b0, c4;
    fma.rn.f32 c4, a5, b4, c4;
    fma.rn.f32 c4, a6, b8, c4;
    fma.rn.f32 c4, a7, b12, c4;
    
    // C[1,1]
    fma.rn.f32 c5, a4, b1, c5;
    fma.rn.f32 c5, a5, b5, c5;
    fma.rn.f32 c5, a6, b9, c5;
    fma.rn.f32 c5, a7, b13, c5;
    
    // C[1,2]
    fma.rn.f32 c6, a4, b2, c6;
    fma.rn.f32 c6, a5, b6, c6;
    fma.rn.f32 c6, a6, b10, c6;
    fma.rn.f32 c6, a7, b14, c6;
    
    // C[1,3]
    fma.rn.f32 c7, a4, b3, c7;
    fma.rn.f32 c7, a5, b7, c7;
    fma.rn.f32 c7, a6, b11, c7;
    fma.rn.f32 c7, a7, b15, c7;
    
    // C[2,0]
    fma.rn.f32 c8, a8, b0, c8;
    fma.rn.f32 c8, a9, b4, c8;
    fma.rn.f32 c8, a10, b8, c8;
    fma.rn.f32 c8, a11, b12, c8;
    
    // C[2,1]
    fma.rn.f32 c9, a8, b1, c9;
    fma.rn.f32 c9, a9, b5, c9;
    fma.rn.f32 c9, a10, b9, c9;
    fma.rn.f32 c9, a11, b13, c9;
    
    // C[2,2]
    fma.rn.f32 c10, a8, b2, c10;
    fma.rn.f32 c10, a9, b6, c10;
    fma.rn.f32 c10, a10, b10, c10;
    fma.rn.f32 c10, a11, b14, c10;
    
    // C[2,3]
    fma.rn.f32 c11, a8, b3, c11;
    fma.rn.f32 c11, a9, b7, c11;
    fma.rn.f32 c11, a10, b11, c11;
    fma.rn.f32 c11, a11, b15, c11;
    
    // C[3,0]
    fma.rn.f32 c12, a12, b0, c12;
    fma.rn.f32 c12, a13, b4, c12;
    fma.rn.f32 c12, a14, b8, c12;
    fma.rn.f32 c12, a15, b12, c12;
    
    // C[3,1]
    fma.rn.f32 c13, a12, b1, c13;
    fma.rn.f32 c13, a13, b5, c13;
    fma.rn.f32 c13, a14, b9, c13;
    fma.rn.f32 c13, a15, b13, c13;
    
    // C[3,2]
    fma.rn.f32 c14, a12, b2, c14;
    fma.rn.f32 c14, a13, b6, c14;
    fma.rn.f32 c14, a14, b10, c14;
    fma.rn.f32 c14, a15, b14, c14;
    
    // C[3,3]
    fma.rn.f32 c15, a12, b3, c15;
    fma.rn.f32 c15, a13, b7, c15;
    fma.rn.f32 c15, a14, b11, c15;
    fma.rn.f32 c15, a15, b15, c15;
    
    // Store results to matrix C
    st.global.f32 [c_ptr], c0;
    st.global.f32 [c_ptr+4], c1;
    st.global.f32 [c_ptr+8], c2;
    st.global.f32 [c_ptr+12], c3;
    st.global.f32 [c_ptr+16], c4;
    st.global.f32 [c_ptr+20], c5;
    st.global.f32 [c_ptr+24], c6;
    st.global.f32 [c_ptr+28], c7;
    st.global.f32 [c_ptr+32], c8;
    st.global.f32 [c_ptr+36], c9;
    st.global.f32 [c_ptr+40], c10;
    st.global.f32 [c_ptr+44], c11;
    st.global.f32 [c_ptr+48], c12;
    st.global.f32 [c_ptr+52], c13;
    st.global.f32 [c_ptr+56], c14;
    st.global.f32 [c_ptr+60], c15;
    
    ret;
}
