.version 7.5
.target sm_86

.visible .entry gemm4x4(
    .param .u64 gemm4x4_param_0,  // Pointer to matrix A
    .param .u64 gemm4x4_param_1,  // Pointer to matrix B
    .param .u64 gemm4x4_param_2   // Pointer to matrix C
)
{
    .reg .f32   %f<33>;  // Registers to hold elements of A, B, and C
    .reg .b64   %rd<4>;  // Registers to hold pointers to A, B, and C

    // Load pointers to matrices A, B, and C
    ld.param.u64    %rd1, [gemm4x4_param_0];
    ld.param.u64    %rd2, [gemm4x4_param_1];
    ld.param.u64    %rd3, [gemm4x4_param_2];

    // Load elements of A
    ld.global.f32   %f1, [%rd1];           // A[0]
    ld.global.f32   %f2, [%rd1 + 4];       // A[1]
    ld.global.f32   %f3, [%rd1 + 8];       // A[2]
    ld.global.f32   %f4, [%rd1 + 12];      // A[3]
    ld.global.f32   %f5, [%rd1 + 16];      // A[4]
    ld.global.f32   %f6, [%rd1 + 20];      // A[5]
    ld.global.f32   %f7, [%rd1 + 24];      // A[6]
    ld.global.f32   %f8, [%rd1 + 28];      // A[7]
    ld.global.f32   %f9, [%rd1 + 32];      // A[8]
    ld.global.f32   %f10, [%rd1 + 36];     // A[9]
    ld.global.f32   %f11, [%rd1 + 40];     // A[10]
    ld.global.f32   %f12, [%rd1 + 44];     // A[11]
    ld.global.f32   %f13, [%rd1 + 48];     // A[12]
    ld.global.f32   %f14, [%rd1 + 52];     // A[13]
    ld.global.f32   %f15, [%rd1 + 56];     // A[14]
    ld.global.f32   %f16, [%rd1 + 60];     // A[15]

    // Load elements of B
    ld.global.f32   %f17, [%rd2];          // B[0]
    ld.global.f32   %f18, [%rd2 + 4];      // B[1]
    ld.global.f32   %f19, [%rd2 + 8];      // B[2]
    ld.global.f32   %f20, [%rd2 + 12];     // B[3]
    ld.global.f32   %f21, [%rd2 + 16];     // B[4]
    ld.global.f32   %f22, [%rd2 + 20];     // B[5]
    ld.global.f32   %f23, [%rd2 + 24];     // B[6]
    ld.global.f32   %f24, [%rd2 + 28];     // B[7]
    ld.global.f32   %f25, [%rd2 + 32];     // B[8]
    ld.global.f32   %f26, [%rd2 + 36];     // B[9]
    ld.global.f32   %f27, [%rd2 + 40];     // B[10]
    ld.global.f32   %f28, [%rd2 + 44];     // B[11]
    ld.global.f32   %f29, [%rd2 + 48];     // B[12]
    ld.global.f32   %f30, [%rd2 + 52];     // B[13]
    ld.global.f32   %f31, [%rd2 + 56];     // B[14]
    ld.global.f32   %f32, [%rd2 + 60];     // B[15]

    // Compute C = A * B
    mov.f32         %f1, 0f00000000;
    fma.rn.f32      %f1, %f1, %f17, %f1;    // C[0] = A[0] * B[0]
    fma.rn.f32      %f1, %f5, %f21, %f1;    // C[0] += A[4] * B[4]
    fma.rn.f32      %f1, %f9, %f25, %f1;    // C[0] += A[8] * B[8]
    fma.rn.f32      %f1, %f13, %f29, %f1;   // C[0] += A[12] * B[12]

    mov.f32         %f2, 0f00000000;
    fma.rn.f32      %f2, %f1, %f18, %f2;    // C[1] = A[0] * B[1]
    fma.rn.f32      %f2, %f5, %f22, %f2;    // C[1] += A[4] * B[5]
    fma.rn.f32      %f2, %f9, %f26, %f2;    // C[1] += A[8] * B[9]
    fma.rn.f32      %f2, %f13, %f30, %f2;   // C[1] += A[12] * B[13]

    mov.f32         %f3, 0f00000000;
    fma.rn.f32      %f3, %f2, %f19, %f3;    // C[2] = A[0] * B[2]
    fma.rn.f32      %f3, %f6, %f23, %f3;    // C[2] += A[4] * B[6]
    fma.rn.f32      %f3, %f10, %f27, %f3;   // C[2] += A[8] * B[10]
    fma.rn.f32      %f3, %f14, %f31, %f3;   // C[2] += A[12] * B[14]

    mov.f32         %f4, 0f00000000;
    fma.rn.f32      %f4, %f3, %f20, %f4;    // C[3] = A[0] * B[3]
    fma.rn.f32      %f4, %f7, %f24, %f4;    // C[3] += A[4] * B[7]
    fma.rn.f32      %f4, %f11, %f28, %f4;   // C[3] += A[8] * B[11]
    fma.rn.f32      %f4, %f15, %f32, %f4;   // C[3] += A[12] * B[15]

    // ... (similarly compute other elements of C)

    mov.f32         %f5, 0f00000000;
    fma.rn.f32      %f5, %f2, %f17, %f5;    // C[4] = A[1] * B[0]
    fma.rn.f32      %f5, %f6, %f21, %f5;    // C[4] += A[5] * B[4]
    fma.rn.f32      %f5, %f10, %f25, %f5;   // C[4] += A[9] * B[8]
    fma.rn.f32      %f5, %f14, %f29, %f5;   // C[4] += A[13] * B[12]

    mov.f32         %f6, 0f00000000;
    fma.rn.f32      %f6, %f2, %f18, %f6;    // C[5] = A[1] * B[1]
    fma.rn.f32      %f6, %f6, %f22, %f6;    // C[5] += A[5] * B[5]
    fma.rn.f32      %f6, %f10, %f26, %f6;   // C[5] += A[9] * B[9]
    fma.rn.f32      %f6, %f14, %f30, %f6;   // C[5] += A[13] * B[13]

    mov.f32         %f7, 0f00000000;
    fma.rn.f32      %f7, %f2, %f19, %f7;    // C[6] = A[1] * B[2]
    fma.rn.f32      %f7, %f6, %f23, %f7;    // C[6] += A[5] * B[6]
    fma.rn.f32      %f7, %f10, %f27, %f7;   // C[6] += A[9] * B[10]
    fma.rn.f32      %f7, %f14, %f31, %f7;   // C[6] += A[13] * B[14]

    mov.f32         %f8, 0f00000000;
    fma.rn.f32      %f8, %f3, %f20, %f8;    // C[7] = A[1] * B[3]
    fma.rn.f32      %f8, %f7, %f24, %f8;    // C[7] += A[5] * B[7]
    fma.rn.f32      %f8, %f11, %f28, %f8;   // C[7] += A[9] * B[11]
    fma.rn.f32      %f8, %f15, %f32, %f8;   // C[7] += A[13] * B[15]

    // ... (similarly compute other elements of C)

    mov.f32         %f9, 0f00000000;
    fma.rn.f32      %f9, %f3, %f17, %f9;    // C[8] = A[2] * B[0]
    fma.rn.f32      %f9, %f7, %f21, %f9;    // C[8] += A[6] * B[4]
    fma.rn.f32      %f9, %f11, %f25, %f9;   // C[8] += A[10] * B[8]
    fma.rn.f32      %f9, %f15, %f29, %f9;   // C[8] += A[14] * B[12]

    mov.f32         %f10, 0f00000000;
    fma.rn.f32      %f10, %f3, %f18, %f10;  // C[9] = A[2] * B[1]
    fma.rn.f32      %f10, %f7, %f22, %f10;  // C[9] += A[6] * B[5]
    fma.rn.f32      %f10, %f11, %f26, %f10; // C[9] += A[10] * B[9]
    fma.rn.f32      %f10, %f15, %f30, %f10; // C[9] += A[14] * B[13]

    mov.f32         %f11, 0f00000000;
    fma.rn.f32      %f11, %f3, %f19, %f11;  // C[10] = A[2] * B[2]
    fma.rn.f32      %f11, %f7, %f23, %f11;  // C[10] += A[6] * B[6]
    fma.rn.f32      %f11, %f11, %f27, %f11; // C[10] += A[10] * B[10]
    fma.rn.f32      %f11, %f15, %f31, %f11; // C[10] += A[14] * B[14]

    mov.f32         %f12, 0f00000000;
    fma.rn.f32      %f12, %f4, %f20, %f12;  // C[11] = A[2] * B[3]
    fma.rn.f32      %f12, %f8, %f24, %f12;  // C[11] += A[6] * B[7]
    fma.rn.f32      %f12, %f12, %f28, %f12; // C[11] += A[10] * B[11]
    fma.rn.f32      %f12, %f16, %f32, %f12; // C[11] += A[14] * B[15]

    // ... (similarly compute other elements of C)

    mov.f32         %f13, 0f00000000;
    fma.rn.f32      %f13, %f4, %f17, %f13;  // C[12] = A[3] * B[0]
    fma.rn.f32      %f13, %f8, %f21, %f13;  // C[12] += A[7] * B[4]
    fma.rn.f32      %f13, %f12, %f25, %f13; // C[12] += A[11] * B[8]
    fma.rn.f32      %f13, %f16, %f29, %f13; // C[12] += A[15] * B[12]

    mov.f32         %f14, 0f00000000;
    fma.rn.f32      %f14, %f4, %f18, %f14;  // C[13] = A[3] * B[1]
    fma.rn.f32      %f14, %f8, %f22, %f14;  // C[13] += A[7] * B[5]
    fma.rn.f32      %f14, %f12, %f26, %f14; // C[13] += A[11] * B[9]
    fma.rn.f32      %f14, %f16, %f30, %f14; // C[13] += A[15] * B[13]

    mov.f32         %f15, 0f000000;
0000;
    fma.rn.f32      %f15, f4, %f19, %f15;  // C[14] = A[3] * B[2]
    fma.rn.f32      %f15, %f8, %f23, %f15;  // C[14] += A[7] * B[6]
    fma.rn.f32      %f15, %f12, %f27, %f15; // C[14] += A[11] * B[10]
    fma.rn.f32      %f15, %f16, %f31, %f15; // C[14] += A[15] * B[14]

    mov.f32         %f16, 0f00000000;
    fma.rn.f32      %f16, %f4, %f20, %f16;  // C[15] = A[3] * B[3]
    fma.rn.f32      %f16, %f8, %f24, %f16;  // C[15] += A[7] * B[7]
    fma.rn.f32      %f16, %f12, %f28, %f16; // C[15] += A[11] * B[11]
    fma.rn.f32      %f16, %f16, %f32, %f16; // C[15] += A[15] * B[15]

    // Store elements of C
    st.global.f32   [%rd3], %f1;           // C[0]
    st.global