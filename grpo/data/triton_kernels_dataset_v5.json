[
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise subtract of two 1D tensors of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef subtract_kernel(\n    x_ptr, \n    y_ptr, \n    output_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x - y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef subtract_kernel(\n    x_ptr, \n    y_ptr, \n    output_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x - y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "subtract",
    "input_shapes": [
      [
        32768
      ],
      [
        32768
      ]
    ],
    "output_shape": [
      32768
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise divide of two 1D tensors of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide(\n    out_ptr, \n    a_ptr, \n    b_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    a = tl.load(a_ptr + offsets, mask=mask)\n    b = tl.load(b_ptr + offsets, mask=mask)\n    \n    result = a / b\n    \n    tl.store(out_ptr + offsets, result, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide(\n    out_ptr, \n    a_ptr, \n    b_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    a = tl.load(a_ptr + offsets, mask=mask)\n    b = tl.load(b_ptr + offsets, mask=mask)\n    \n    result = a / b\n    \n    tl.store(out_ptr + offsets, result, mask=mask)",
    "operation": "divide",
    "input_shapes": [
      [
        8192
      ],
      [
        8192
      ]
    ],
    "output_shape": [
      8192
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise divide of two 1D tensors of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    \n    # Avoid division by zero\n    y = tl.where(y == 0, tl.full_like(y, float('nan')), y)\n    \n    output = x / y\n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    \n    # Avoid division by zero\n    y = tl.where(y == 0, tl.full_like(y, float('nan')), y)\n    \n    output = x / y\n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "divide",
    "input_shapes": [
      [
        1024
      ],
      [
        1024
      ]
    ],
    "output_shape": [
      1024
    ],
    "optimization_level": "none",
    "compiles": false,
    "error_message": "Benchmark failed: module 'triton.language' has no attribute 'full_like'"
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the max reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col = tl.program_id(1)\n\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    input_ptrs = input_ptr + row * N + offs_n\n\n    max_val = tl.load(input_ptrs, mask=offs_n < N, other=-float('inf'))\n    for n_offset in range(BLOCK_SIZE_N, N, BLOCK_SIZE_N):\n        input_ptrs = input_ptr + row * N + offs_n + n_offset\n        max_val = tl.maximum(max_val, tl.load(input_ptrs, mask=(offs_n + n_offset) < N, other=-float('inf')))\n\n    tl.store(output_ptr + row, max_val)\n\ndef max_reduce(input, output):\n    M, N = input.shape\n    BLOCK_SIZE_M = 1\n    BLOCK_SIZE_N = 256\n\n    grid = lambda META: (M, 1)\n    max_reduce_kernel[grid](\n        input, \n        output, \n        M, \n        N, \n        BLOCK_SIZE_M=BLOCK_SIZE_M, \n        BLOCK_SIZE_N=BLOCK_SIZE_N\n    )\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col = tl.program_id(1)\n\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    input_ptrs = input_ptr + row * N + offs_n\n\n    max_val = tl.load(input_ptrs, mask=offs_n < N, other=-float('inf'))\n    for n_offset in range(BLOCK_SIZE_N, N, BLOCK_SIZE_N):\n        input_ptrs = input_ptr + row * N + offs_n + n_offset\n        max_val = tl.maximum(max_val, tl.load(input_ptrs, mask=(offs_n + n_offset) < N, other=-float('inf')))\n\n    tl.store(output_ptr + row, max_val)\n\ndef max_reduce(input, output):\n    M, N = input.shape\n    BLOCK_SIZE_M = 1\n    BLOCK_SIZE_N = 256\n\n    grid = lambda META: (M, 1)\n    max_reduce_kernel[grid](\n        input, \n        output, \n        M, \n        N, \n        BLOCK_SIZE_M=BLOCK_SIZE_M, \n        BLOCK_SIZE_N=BLOCK_SIZE_N\n    )",
    "operation": "max_reduction",
    "input_shapes": [
      [
        1024,
        128
      ]
    ],
    "output_shape": [
      1024
    ],
    "optimization_level": "none",
    "compiles": false,
    "error_message": "Benchmark failed: 'function' object is not subscriptable"
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the sum reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    sum = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        sum += tl.load(input_ptr + offs_n, mask=mask, other=0.0)\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n\n    sum = tl.sum(sum, axis=0)\n    tl.store(output_ptr, sum)\n\ndef sum_reduction(x):\n    M, N = x.shape\n    BLOCK_SIZE_M = 1\n    BLOCK_SIZE_N = 256\n    output = torch.empty(M, dtype=x.dtype, device=x.device)\n    grid = lambda meta: (M, )\n    sum_reduction_kernel[grid](\n        x, output, \n        M, N, \n        BLOCK_SIZE_M, BLOCK_SIZE_N\n    )\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    sum = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        sum += tl.load(input_ptr + offs_n, mask=mask, other=0.0)\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n\n    sum = tl.sum(sum, axis=0)\n    tl.store(output_ptr, sum)\n\ndef sum_reduction(x):\n    M, N = x.shape\n    BLOCK_SIZE_M = 1\n    BLOCK_SIZE_N = 256\n    output = torch.empty(M, dtype=x.dtype, device=x.device)\n    grid = lambda meta: (M, )\n    sum_reduction_kernel[grid](\n        x, output, \n        M, N, \n        BLOCK_SIZE_M, BLOCK_SIZE_N\n    )\n    return output",
    "operation": "sum_reduction",
    "input_shapes": [
      [
        512,
        256
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": false,
    "error_message": "Benchmark failed: 'function' object is not subscriptable"
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the sum reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n    \n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    acc = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n    \n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        vals = tl.load(input_ptr + offs_n, mask=mask, other=0.0)\n        acc += vals\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n    \n    acc = tl.sum(acc, axis=0)\n    tl.store(output_ptr, acc)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n    \n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    acc = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n    \n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        vals = tl.load(input_ptr + offs_n, mask=mask, other=0.0)\n        acc += vals\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n    \n    acc = tl.sum(acc, axis=0)\n    tl.store(output_ptr, acc)",
    "operation": "sum_reduction",
    "input_shapes": [
      [
        1024,
        128
      ]
    ],
    "output_shape": [
      1024
    ],
    "optimization_level": "none",
    "compiles": false,
    "error_message": "Benchmark failed: dynamic_func() missing 2 required positional arguments: 'BLOCK_SIZE_M' and 'BLOCK_SIZE_N'"
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Calculate the row and column indices of the output matrix\n    row = tl.program_id(0) * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    col = tl.program_id(1) * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    # Create pointers to the input matrices\n    a_ptrs = a_ptr + (row[:, None] * stride_am + tl.arange(0, BLOCK_SIZE_K) * stride_ak)\n    b_ptrs = b_ptr + (tl.arange(0, BLOCK_SIZE_K)[:, None] * stride_bk + col[None, :] * stride_bn)\n\n    # Initialize the accumulator\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform the matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(k + tl.arange(0, BLOCK_SIZE_K))[:, None] < K, other=0.0)\n        b = tl.load(b_ptrs, mask=(k + tl.arange(0, BLOCK_SIZE_K))[:, None] < K, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    c_ptrs = c_ptr + (row[:, None] * stride_cm + col[None, :] * stride_cn)\n    tl.store(c_ptrs, accumulator, mask=(row[:, None] < M) & (col[None, :] < N))\n\ndef matmul(a, b):\n    # Check the input shapes\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output matrix\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Calculate the grid size\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Calculate the row and column indices of the output matrix\n    row = tl.program_id(0) * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    col = tl.program_id(1) * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    # Create pointers to the input matrices\n    a_ptrs = a_ptr + (row[:, None] * stride_am + tl.arange(0, BLOCK_SIZE_K) * stride_ak)\n    b_ptrs = b_ptr + (tl.arange(0, BLOCK_SIZE_K)[:, None] * stride_bk + col[None, :] * stride_bn)\n\n    # Initialize the accumulator\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform the matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(k + tl.arange(0, BLOCK_SIZE_K))[:, None] < K, other=0.0)\n        b = tl.load(b_ptrs, mask=(k + tl.arange(0, BLOCK_SIZE_K))[:, None] < K, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    c_ptrs = c_ptr + (row[:, None] * stride_cm + col[None, :] * stride_cn)\n    tl.store(c_ptrs, accumulator, mask=(row[:, None] < M) & (col[None, :] < N))\n\ndef matmul(a, b):\n    # Check the input shapes\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output matrix\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Calculate the grid size\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        256
      ],
      [
        256,
        512
      ]
    ],
    "output_shape": [
      256,
      512
    ],
    "optimization_level": "none",
    "compiles": false,
    "error_message": "Benchmark failed: 'function' object is not subscriptable"
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr, \n    BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = A_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = B_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, tl.cdiv(K, BLOCK_SIZE_K)):\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator.to(tl.float16)\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, c, mask=c_mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr, \n    BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = A_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = B_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, tl.cdiv(K, BLOCK_SIZE_K)):\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator.to(tl.float16)\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, c, mask=c_mask)",
    "operation": "matmul",
    "input_shapes": [
      [
        512,
        512
      ],
      [
        512,
        256
      ]
    ],
    "output_shape": [
      512,
      256
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr = BLOCK_SIZE_M,\n    BLOCK_SIZE_N: tl.constexpr = BLOCK_SIZE_N,\n    BLOCK_SIZE_K: tl.constexpr = BLOCK_SIZE_K,\n):\n    # Program ID and grid coordinates\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block coordinates\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    # Initialize pointers to A, B, and C\n    A_ptrs = A_ptr + (offs_m[:, None] * stride_am + tl.arange(0, BLOCK_SIZE_K) * stride_ak)\n    B_ptrs = B_ptr + (tl.arange(0, BLOCK_SIZE_K)[:, None] * stride_bk + offs_n[None, :] * stride_bn)\n    C = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load A and B with masking for edge cases\n        A = tl.load(A_ptrs, mask=(offs_m[:, None] < M) & (tl.arange(0, BLOCK_SIZE_K)[None, :] < K), other=0.0)\n        B = tl.load(B_ptrs, mask=(tl.arange(0, BLOCK_SIZE_K)[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n\n        # Perform computation\n        C += tl.dot(A, B)\n\n        # Advance pointers for A and B\n        A_ptrs += BLOCK_SIZE_K * stride_ak\n        B_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store result to C with masking for edge cases\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    C_ptrs = C_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(C_ptrs, C, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr = BLOCK_SIZE_M,\n    BLOCK_SIZE_N: tl.constexpr = BLOCK_SIZE_N,\n    BLOCK_SIZE_K: tl.constexpr = BLOCK_SIZE_K,\n):\n    # Program ID and grid coordinates\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block coordinates\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    # Initialize pointers to A, B, and C\n    A_ptrs = A_ptr + (offs_m[:, None] * stride_am + tl.arange(0, BLOCK_SIZE_K) * stride_ak)\n    B_ptrs = B_ptr + (tl.arange(0, BLOCK_SIZE_K)[:, None] * stride_bk + offs_n[None, :] * stride_bn)\n    C = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load A and B with masking for edge cases\n        A = tl.load(A_ptrs, mask=(offs_m[:, None] < M) & (tl.arange(0, BLOCK_SIZE_K)[None, :] < K), other=0.0)\n        B = tl.load(B_ptrs, mask=(tl.arange(0, BLOCK_SIZE_K)[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n\n        # Perform computation\n        C += tl.dot(A, B)\n\n        # Advance pointers for A and B\n        A_ptrs += BLOCK_SIZE_K * stride_ak\n        B_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store result to C with masking for edge cases\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    C_ptrs = C_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(C_ptrs, C, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        256
      ],
      [
        256,
        128
      ]
    ],
    "output_shape": [
      256,
      128
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  }
]