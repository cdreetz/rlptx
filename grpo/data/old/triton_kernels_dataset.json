[
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise subtract of two 1D tensors of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef subtract_kernel(\n    x_ptr, \n    y_ptr, \n    output_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x - y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef subtract_kernel(\n    x_ptr, \n    y_ptr, \n    output_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x - y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "subtract",
    "input_shapes": [
      [
        16384
      ],
      [
        16384
      ]
    ],
    "output_shape": [
      16384
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes sigmoid of a 1D tensor of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to make multiple \"programs\" for the Triton runtime to run in parallel, \n    # so we get the \"program id\" (pid) of the current program\n    pid = tl.program_id(axis=0)\n    \n    # We calculate the starting index of the block that the current program is responsible for\n    block_start = pid * BLOCK_SIZE\n    \n    # We create a mask to handle edge cases where N is not a multiple of BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    # Load x at the current program's block_start offset, with the mask applied\n    x = tl.load(x_ptr + offsets, mask=mask)\n    \n    # Compute sigmoid\n    output = 1 / (1 + tl.exp(-x))\n    \n    # Store the result at the same offset, with the same mask\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n# Example usage (not part of the kernel code)\n# N = 1024\n# x = torch.randn(N, device='cuda')\n# output = torch.empty_like(x)\n# grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n# sigmoid_kernel[grid](x, output, N, BLOCK_SIZE=256)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to make multiple \"programs\" for the Triton runtime to run in parallel, \n    # so we get the \"program id\" (pid) of the current program\n    pid = tl.program_id(axis=0)\n    \n    # We calculate the starting index of the block that the current program is responsible for\n    block_start = pid * BLOCK_SIZE\n    \n    # We create a mask to handle edge cases where N is not a multiple of BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    # Load x at the current program's block_start offset, with the mask applied\n    x = tl.load(x_ptr + offsets, mask=mask)\n    \n    # Compute sigmoid\n    output = 1 / (1 + tl.exp(-x))\n    \n    # Store the result at the same offset, with the same mask\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n# Example usage (not part of the kernel code)\n# N = 1024\n# x = torch.randn(N, device='cuda')\n# output = torch.empty_like(x)\n# grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n# sigmoid_kernel[grid](x, output, N, BLOCK_SIZE=256)",
    "operation": "sigmoid",
    "input_shapes": [
      [
        4096
      ]
    ],
    "output_shape": [
      4096
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes relu of a 1D tensor of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to make multiple \"programs\" to cover the entire input tensor.\n    # Triton will automatically parallelize these \"programs\".\n    pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0.\n    # This program will process inputs that are offset from the initial data pointer.\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to guard memory operations against out-of-bounds accesses.\n    mask = offsets < N\n    # Load x at the given `offsets`\n    x = tl.load(x_ptr + offsets, mask=mask)\n    # Apply ReLU\n    output = tl.maximum(x, 0)\n    # Write output back to memory\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef relu(x):\n    # We need to preallocate the output.\n    output = torch.empty_like(x)\n    # The SPMD launch grid denotes the number of kernel instances that run in parallel.\n    # It is analogous to CUDA launch grids.\n    # Here we use a 1D grid where the size is the number of blocks.\n    grid = lambda meta: (triton.cdiv(x.numel(), meta['BLOCK_SIZE']),)\n    # NOTE:\n    #  - Each torch.tensor object is implicitly converted into a pointer to its first element.\n    #  - `triton.jit`'ed functions can be indexed with a launch grid to obtain a callable GPU kernel.\n    relu_kernel[grid](x, output, x.numel(), BLOCK_SIZE=1024)\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to make multiple \"programs\" to cover the entire input tensor.\n    # Triton will automatically parallelize these \"programs\".\n    pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0.\n    # This program will process inputs that are offset from the initial data pointer.\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to guard memory operations against out-of-bounds accesses.\n    mask = offsets < N\n    # Load x at the given `offsets`\n    x = tl.load(x_ptr + offsets, mask=mask)\n    # Apply ReLU\n    output = tl.maximum(x, 0)\n    # Write output back to memory\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef relu(x):\n    # We need to preallocate the output.\n    output = torch.empty_like(x)\n    # The SPMD launch grid denotes the number of kernel instances that run in parallel.\n    # It is analogous to CUDA launch grids.\n    # Here we use a 1D grid where the size is the number of blocks.\n    grid = lambda meta: (triton.cdiv(x.numel(), meta['BLOCK_SIZE']),)\n    # NOTE:\n    #  - Each torch.tensor object is implicitly converted into a pointer to its first element.\n    #  - `triton.jit`'ed functions can be indexed with a launch grid to obtain a callable GPU kernel.\n    relu_kernel[grid](x, output, x.numel(), BLOCK_SIZE=1024)\n    return output",
    "operation": "relu",
    "input_shapes": [
      [
        8192
      ]
    ],
    "output_shape": [
      8192
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise multiply of two 1D tensors of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef elementwise_multiply_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x * y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef elementwise_multiply(x, y):\n    N = x.shape[0]\n    BLOCK_SIZE = triton.next_power_of_2(N)\n    output = torch.empty_like(x)\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    elementwise_multiply_kernel[grid](x, y, output, N, BLOCK_SIZE)\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef elementwise_multiply_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x * y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef elementwise_multiply(x, y):\n    N = x.shape[0]\n    BLOCK_SIZE = triton.next_power_of_2(N)\n    output = torch.empty_like(x)\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    elementwise_multiply_kernel[grid](x, y, output, N, BLOCK_SIZE)\n    return output",
    "operation": "multiply",
    "input_shapes": [
      [
        32768
      ],
      [
        32768
      ]
    ],
    "output_shape": [
      32768
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes sigmoid of a 1D tensor of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr, \n    output_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n    output = 1 / (1 + tl.exp(-x))\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef sigmoid(x, output):\n    N = x.numel()\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    sigmoid_kernel[grid](x, output, N, BLOCK_SIZE=BLOCK_SIZE)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr, \n    output_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n    output = 1 / (1 + tl.exp(-x))\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef sigmoid(x, output):\n    N = x.numel()\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    sigmoid_kernel[grid](x, output, N, BLOCK_SIZE=BLOCK_SIZE)",
    "operation": "sigmoid",
    "input_shapes": [
      [
        8192
      ]
    ],
    "output_shape": [
      8192
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise multiply of two 1D tensors of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_multiply_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x * y\n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_multiply_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x * y\n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "multiply",
    "input_shapes": [
      [
        32768
      ],
      [
        32768
      ]
    ],
    "output_shape": [
      32768
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes sigmoid of a 1D tensor of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,\n):\n    # Calculate the block index and the thread index within the block\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    # Load data with masking to handle edge cases\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + tl.exp(-x))\n\n    # Store the result with masking\n    tl.store(output_ptr + offsets, sigmoid_x, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,\n):\n    # Calculate the block index and the thread index within the block\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    # Load data with masking to handle edge cases\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + tl.exp(-x))\n\n    # Store the result with masking\n    tl.store(output_ptr + offsets, sigmoid_x, mask=mask)",
    "operation": "sigmoid",
    "input_shapes": [
      [
        4096
      ]
    ],
    "output_shape": [
      4096
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes sigmoid of a 1D tensor of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # * Pointer to input vector\n    output_ptr,  # * Pointer to output vector\n    N,  # * Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # * Block size for the kernel\n):\n    # Calculate the block index and the thread index within the block\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    # Load data with masking to handle edge cases\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    # Compute sigmoid\n    sigmoid = 1 / (1 + tl.exp(-x))\n\n    # Store the result with masking\n    tl.store(output_ptr + offsets, sigmoid, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # * Pointer to input vector\n    output_ptr,  # * Pointer to output vector\n    N,  # * Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # * Block size for the kernel\n):\n    # Calculate the block index and the thread index within the block\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    # Load data with masking to handle edge cases\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    # Compute sigmoid\n    sigmoid = 1 / (1 + tl.exp(-x))\n\n    # Store the result with masking\n    tl.store(output_ptr + offsets, sigmoid, mask=mask)",
    "operation": "sigmoid",
    "input_shapes": [
      [
        4096
      ]
    ],
    "output_shape": [
      4096
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes gelu of a 1D tensor of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef gelu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n    output = x * 0.5 * (1.0 + tl.math.tanh(0.79788456 * (x + 0.044715 * x * x * x)))\n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef gelu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n    output = x * 0.5 * (1.0 + tl.math.tanh(0.79788456 * (x + 0.044715 * x * x * x)))\n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "gelu",
    "input_shapes": [
      [
        1024
      ]
    ],
    "output_shape": [
      1024
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes gelu of a 1D tensor of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef gelu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to offset the input and output pointers by the program ID\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    \n    # Compute GeLU\n    cdf = 0.5 * (1.0 + tl.math.tanh(tl.math.sqrt(2 / tl.math.pi) * (x + 0.044715 * tl.math.pow(x, 3))))\n    output = x * cdf\n    \n    # Store the result\n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef gelu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to offset the input and output pointers by the program ID\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    \n    # Compute GeLU\n    cdf = 0.5 * (1.0 + tl.math.tanh(tl.math.sqrt(2 / tl.math.pi) * (x + 0.044715 * tl.math.pow(x, 3))))\n    output = x * cdf\n    \n    # Store the result\n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "gelu",
    "input_shapes": [
      [
        32768
      ]
    ],
    "output_shape": [
      32768
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise multiply of two 1D tensors of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_multiply_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x * y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef element_wise_multiply(x, y):\n    N = x.shape[0]\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    output = torch.empty_like(x)\n    element_wise_multiply_kernel[grid](x, y, output, N, BLOCK_SIZE)\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_multiply_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x * y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef element_wise_multiply(x, y):\n    N = x.shape[0]\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    output = torch.empty_like(x)\n    element_wise_multiply_kernel[grid](x, y, output, N, BLOCK_SIZE)\n    return output",
    "operation": "multiply",
    "input_shapes": [
      [
        16384
      ],
      [
        16384
      ]
    ],
    "output_shape": [
      16384
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes relu of a 1D tensor of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We use a 1D launch grid, so pid is a single value\n    pid = tl.program_id(axis=0)\n    # Create a block index from the program ID\n    block_start = pid * BLOCK_SIZE\n    # Create a mask to avoid out-of-bounds loads\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    # Apply ReLU\n    output = tl.maximum(x, 0)\n    # Store the result\n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We use a 1D launch grid, so pid is a single value\n    pid = tl.program_id(axis=0)\n    # Create a block index from the program ID\n    block_start = pid * BLOCK_SIZE\n    # Create a mask to avoid out-of-bounds loads\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    # Apply ReLU\n    output = tl.maximum(x, 0)\n    # Store the result\n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "relu",
    "input_shapes": [
      [
        8192
      ]
    ],
    "output_shape": [
      8192
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes relu of a 1D tensor of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We use a 1D launch grid, so the program ID is `pid`\n    pid = tl.program_id(axis=0)\n    # Calculate the offset of the first element in the block\n    block_start = pid * BLOCK_SIZE\n    # Create a mask to handle edge cases\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    # Apply ReLU\n    output = tl.maximum(x, 0)\n    # Store output\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef relu(x):\n    N = x.numel()\n    output = torch.empty_like(x)\n    # We need to grid-ify our launch so that Triton knows how many programs to launch\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    relu_kernel[grid](x, output, N, BLOCK_SIZE=1024)\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We use a 1D launch grid, so the program ID is `pid`\n    pid = tl.program_id(axis=0)\n    # Calculate the offset of the first element in the block\n    block_start = pid * BLOCK_SIZE\n    # Create a mask to handle edge cases\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    # Apply ReLU\n    output = tl.maximum(x, 0)\n    # Store output\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef relu(x):\n    N = x.numel()\n    output = torch.empty_like(x)\n    # We need to grid-ify our launch so that Triton knows how many programs to launch\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    relu_kernel[grid](x, output, N, BLOCK_SIZE=1024)\n    return output",
    "operation": "relu",
    "input_shapes": [
      [
        1024
      ]
    ],
    "output_shape": [
      1024
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes sigmoid of a 1D tensor of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to make sure that we don't go out of bounds\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    \n    # Compute sigmoid\n    sigmoid = 1 / (1 + tl.exp(-x))\n    \n    # Store the result\n    tl.store(output_ptr + offsets, sigmoid, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to make sure that we don't go out of bounds\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    \n    # Compute sigmoid\n    sigmoid = 1 / (1 + tl.exp(-x))\n    \n    # Store the result\n    tl.store(output_ptr + offsets, sigmoid, mask=mask)",
    "operation": "sigmoid",
    "input_shapes": [
      [
        8192
      ]
    ],
    "output_shape": [
      8192
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise multiply of two 1D tensors of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_multiply_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x * y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_multiply_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x * y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "multiply",
    "input_shapes": [
      [
        4096
      ],
      [
        4096
      ]
    ],
    "output_shape": [
      4096
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes relu of a 1D tensor of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # * Pointer to input vector\n    output_ptr,  # * Pointer to output vector\n    N,  # * Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # * Block size for the kernel\n):\n    # Calculate the block index and the offset within the block\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    # Load data with masking to handle edge cases\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    # Apply ReLU\n    output = tl.maximum(x, 0)\n\n    # Store the output\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef relu(x):\n    N = x.numel()\n    output = torch.empty_like(x)\n    BLOCK_SIZE = 1024  # Example block size, can be tuned\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    relu_kernel[grid](x, output, N, BLOCK_SIZE=BLOCK_SIZE)\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # * Pointer to input vector\n    output_ptr,  # * Pointer to output vector\n    N,  # * Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # * Block size for the kernel\n):\n    # Calculate the block index and the offset within the block\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    # Load data with masking to handle edge cases\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    # Apply ReLU\n    output = tl.maximum(x, 0)\n\n    # Store the output\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef relu(x):\n    N = x.numel()\n    output = torch.empty_like(x)\n    BLOCK_SIZE = 1024  # Example block size, can be tuned\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    relu_kernel[grid](x, output, N, BLOCK_SIZE=BLOCK_SIZE)\n    return output",
    "operation": "relu",
    "input_shapes": [
      [
        8192
      ]
    ],
    "output_shape": [
      8192
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise divide of two 1D tensors of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide(\n    out_ptr, \n    a_ptr, \n    b_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    a = tl.load(a_ptr + offsets, mask=mask)\n    b = tl.load(b_ptr + offsets, mask=mask)\n    \n    result = a / b\n    \n    tl.store(out_ptr + offsets, result, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide(\n    out_ptr, \n    a_ptr, \n    b_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    a = tl.load(a_ptr + offsets, mask=mask)\n    b = tl.load(b_ptr + offsets, mask=mask)\n    \n    result = a / b\n    \n    tl.store(out_ptr + offsets, result, mask=mask)",
    "operation": "divide",
    "input_shapes": [
      [
        16384
      ],
      [
        16384
      ]
    ],
    "output_shape": [
      16384
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise subtract of two 1D tensors of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef subtract_kernel(\n    x_ptr, \n    y_ptr, \n    output_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x - y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef subtract_kernel(\n    x_ptr, \n    y_ptr, \n    output_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x - y\n    \n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "subtract",
    "input_shapes": [
      [
        16384
      ],
      [
        16384
      ]
    ],
    "output_shape": [
      16384
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise divide of two 1D tensors of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = tl.where(y != 0, x / y, 0.0)\n    \n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = tl.where(y != 0, x / y, 0.0)\n    \n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "divide",
    "input_shapes": [
      [
        8192
      ],
      [
        8192
      ]
    ],
    "output_shape": [
      8192
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise divide of two 1D tensors of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide(\n    out_ptr, \n    a_ptr, \n    b_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    a = tl.load(a_ptr + offsets, mask=mask)\n    b = tl.load(b_ptr + offsets, mask=mask)\n    \n    result = a / b\n    \n    tl.store(out_ptr + offsets, result, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide(\n    out_ptr, \n    a_ptr, \n    b_ptr, \n    N, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    a = tl.load(a_ptr + offsets, mask=mask)\n    b = tl.load(b_ptr + offsets, mask=mask)\n    \n    result = a / b\n    \n    tl.store(out_ptr + offsets, result, mask=mask)",
    "operation": "divide",
    "input_shapes": [
      [
        4096
      ],
      [
        4096
      ]
    ],
    "output_shape": [
      4096
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the sum reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M, N, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    sum = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        sum += tl.load(input_ptr + offs_n, mask=mask, other=0.0)\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n\n    sum = tl.sum(sum, axis=0)\n    tl.store(output_ptr, sum)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M, N, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    sum = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        sum += tl.load(input_ptr + offs_n, mask=mask, other=0.0)\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n\n    sum = tl.sum(sum, axis=0)\n    tl.store(output_ptr, sum)",
    "operation": "sum_reduction",
    "input_shapes": [
      [
        512,
        512
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the max reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    row_offset = row * N\n    col_offsets = col_block * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    max_val = tl.where(col_offsets < N, tl.load(input_ptr + row_offset + col_offsets), float('-inf'))\n    for col_offset in range(BLOCK_SIZE_N, N, BLOCK_SIZE_N):\n        mask = col_offsets + col_offset < N\n        max_val = tl.maximum(max_val, tl.where(mask, tl.load(input_ptr + row_offset + col_offsets + col_offset), float('-inf')))\n\n    output_offset = row * tl.num_programs(1) + col_block\n    tl.store(output_ptr + output_offset, max_val)\n\n@triton.jit\ndef max_reduce_final_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    num_blocks: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr\n):\n    row = tl.program_id(0)\n\n    row_offsets = row * num_blocks + tl.arange(0, num_blocks)\n    max_val = tl.where(row_offsets < num_blocks, tl.load(input_ptr + row_offsets), float('-inf'))\n    for row_offset in range(num_blocks, M, num_blocks):\n        mask = row_offsets + row_offset < M\n        max_val = tl.maximum(max_val, tl.where(mask, tl.load(input_ptr + row_offsets + row_offset), float('-inf')))\n\n    tl.store(output_ptr + row, tl.max(max_val, axis=0))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    row_offset = row * N\n    col_offsets = col_block * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    max_val = tl.where(col_offsets < N, tl.load(input_ptr + row_offset + col_offsets), float('-inf'))\n    for col_offset in range(BLOCK_SIZE_N, N, BLOCK_SIZE_N):\n        mask = col_offsets + col_offset < N\n        max_val = tl.maximum(max_val, tl.where(mask, tl.load(input_ptr + row_offset + col_offsets + col_offset), float('-inf')))\n\n    output_offset = row * tl.num_programs(1) + col_block\n    tl.store(output_ptr + output_offset, max_val)\n\n@triton.jit\ndef max_reduce_final_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    num_blocks: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr\n):\n    row = tl.program_id(0)\n\n    row_offsets = row * num_blocks + tl.arange(0, num_blocks)\n    max_val = tl.where(row_offsets < num_blocks, tl.load(input_ptr + row_offsets), float('-inf'))\n    for row_offset in range(num_blocks, M, num_blocks):\n        mask = row_offsets + row_offset < M\n        max_val = tl.maximum(max_val, tl.where(mask, tl.load(input_ptr + row_offsets + row_offset), float('-inf')))\n\n    tl.store(output_ptr + row, tl.max(max_val, axis=0))",
    "operation": "max_reduction",
    "input_shapes": [
      [
        128,
        256
      ]
    ],
    "output_shape": [
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the min reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef min_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    mask_m = offs_m < M\n    \n    min_val = tl.full([BLOCK_SIZE_M], float('inf'), dtype=tl.float32)\n    for n in range(0, N, BLOCK_SIZE_N):\n        offs = offs_m[:, None] * N + n + offs_n[None, :]\n        mask = mask_m[:, None] & (n + offs_n[None, :] < N)\n        vals = tl.load(input_ptr + offs, mask=mask, other=float('inf'))\n        min_val = tl.minimum(min_val, tl.min(vals, axis=1))\n    \n    offs_output = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    mask_output = offs_output < M\n    tl.store(output_ptr + offs_output, min_val, mask=mask_output)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef min_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    mask_m = offs_m < M\n    \n    min_val = tl.full([BLOCK_SIZE_M], float('inf'), dtype=tl.float32)\n    for n in range(0, N, BLOCK_SIZE_N):\n        offs = offs_m[:, None] * N + n + offs_n[None, :]\n        mask = mask_m[:, None] & (n + offs_n[None, :] < N)\n        vals = tl.load(input_ptr + offs, mask=mask, other=float('inf'))\n        min_val = tl.minimum(min_val, tl.min(vals, axis=1))\n    \n    offs_output = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    mask_output = offs_output < M\n    tl.store(output_ptr + offs_output, min_val, mask=mask_output)",
    "operation": "min_reduction",
    "input_shapes": [
      [
        128,
        128
      ]
    ],
    "output_shape": [
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the max reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_input_m, \n    stride_input_n, \n    stride_output_m, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    row_offset = row * stride_input_m\n    col_offsets = col_block * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    mask = col_offsets < N\n\n    max_val = tl.load(input_ptr + row_offset + col_offsets * stride_input_n, mask=mask, other=-float('inf'))\n    for col_offset in range(BLOCK_SIZE_N, N, BLOCK_SIZE_N):\n        col_offsets = col_offset + tl.arange(0, BLOCK_SIZE_N)\n        mask = col_offsets < N\n        val = tl.load(input_ptr + row_offset + col_offsets * stride_input_n, mask=mask, other=-float('inf'))\n        max_val = tl.maximum(max_val, val)\n\n    output_offset = row * stride_output_m + col_block\n    tl.store(output_ptr + output_offset, max_val)\n\n@triton.jit\ndef max_reduce_final_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    stride_input_m, \n    stride_output_m, \n    BLOCK_SIZE_M: tl.constexpr\n):\n    col = tl.program_id(0)\n    row_block = tl.program_id(1)\n\n    col_offset = col\n    row_offsets = row_block * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    mask = row_offsets < M\n\n    max_val = tl.load(input_ptr + row_offsets * stride_input_m + col_offset, mask=mask, other=-float('inf'))\n    for row_offset in range(BLOCK_SIZE_M, M, BLOCK_SIZE_M):\n        row_offsets = row_offset + tl.arange(0, BLOCK_SIZE_M)\n        mask = row_offsets < M\n        val = tl.load(input_ptr + row_offsets * stride_input_m + col_offset, mask=mask, other=-float('inf'))\n        max_val = tl.maximum(max_val, val)\n\n    output_offset = col\n    tl.store(output_ptr + output_offset, max_val)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_input_m, \n    stride_input_n, \n    stride_output_m, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    row_offset = row * stride_input_m\n    col_offsets = col_block * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    mask = col_offsets < N\n\n    max_val = tl.load(input_ptr + row_offset + col_offsets * stride_input_n, mask=mask, other=-float('inf'))\n    for col_offset in range(BLOCK_SIZE_N, N, BLOCK_SIZE_N):\n        col_offsets = col_offset + tl.arange(0, BLOCK_SIZE_N)\n        mask = col_offsets < N\n        val = tl.load(input_ptr + row_offset + col_offsets * stride_input_n, mask=mask, other=-float('inf'))\n        max_val = tl.maximum(max_val, val)\n\n    output_offset = row * stride_output_m + col_block\n    tl.store(output_ptr + output_offset, max_val)\n\n@triton.jit\ndef max_reduce_final_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    stride_input_m, \n    stride_output_m, \n    BLOCK_SIZE_M: tl.constexpr\n):\n    col = tl.program_id(0)\n    row_block = tl.program_id(1)\n\n    col_offset = col\n    row_offsets = row_block * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    mask = row_offsets < M\n\n    max_val = tl.load(input_ptr + row_offsets * stride_input_m + col_offset, mask=mask, other=-float('inf'))\n    for row_offset in range(BLOCK_SIZE_M, M, BLOCK_SIZE_M):\n        row_offsets = row_offset + tl.arange(0, BLOCK_SIZE_M)\n        mask = row_offsets < M\n        val = tl.load(input_ptr + row_offsets * stride_input_m + col_offset, mask=mask, other=-float('inf'))\n        max_val = tl.maximum(max_val, val)\n\n    output_offset = col\n    tl.store(output_ptr + output_offset, max_val)",
    "operation": "max_reduction",
    "input_shapes": [
      [
        512,
        256
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the mean reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    X_ptr,  # Pointer to input tensor\n    Y_ptr,  # Pointer to output tensor\n    M,      # Number of rows in input tensor\n    N,      # Number of columns in input tensor\n    stride_xm,  # Stride of input tensor along M dimension\n    stride_xn,  # Stride of input tensor along N dimension\n    stride_y,   # Stride of output tensor\n    BLOCK_SIZE_N: tl.constexpr,  # Block size along N dimension\n):\n    # Get the row index\n    row_idx = tl.program_id(0)\n\n    # Calculate the pointers to the input and output elements\n    X_row_ptr = X_ptr + row_idx * stride_xm\n    Y_ptr = Y_ptr + row_idx * stride_y\n\n    # Initialize accumulator\n    acc = tl.zeros([1], dtype=tl.float32)\n\n    # Compute the mean\n    for n_off in range(0, N, BLOCK_SIZE_N):\n        mask = n_off + tl.arange(0, BLOCK_SIZE_N) < N\n        X = tl.load(X_row_ptr + n_off, mask=mask, other=0.0)\n        acc += tl.sum(X, axis=0)\n\n    mean = acc / N\n\n    # Store the result\n    tl.store(Y_ptr, mean)\n\ndef mean_reduction(X):\n    M, N = X.shape\n    Y = torch.empty(M, dtype=X.dtype, device=X.device)\n\n    # Define the grid and block size\n    grid = lambda META: (M, )\n    BLOCK_SIZE_N = 256\n\n    # Launch the kernel\n    mean_reduction_kernel[grid](\n        X, Y, M, N, \n        X.stride(0), X.stride(1), Y.stride(0), \n        BLOCK_SIZE_N=BLOCK_SIZE_N\n    )\n    return Y\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    X_ptr,  # Pointer to input tensor\n    Y_ptr,  # Pointer to output tensor\n    M,      # Number of rows in input tensor\n    N,      # Number of columns in input tensor\n    stride_xm,  # Stride of input tensor along M dimension\n    stride_xn,  # Stride of input tensor along N dimension\n    stride_y,   # Stride of output tensor\n    BLOCK_SIZE_N: tl.constexpr,  # Block size along N dimension\n):\n    # Get the row index\n    row_idx = tl.program_id(0)\n\n    # Calculate the pointers to the input and output elements\n    X_row_ptr = X_ptr + row_idx * stride_xm\n    Y_ptr = Y_ptr + row_idx * stride_y\n\n    # Initialize accumulator\n    acc = tl.zeros([1], dtype=tl.float32)\n\n    # Compute the mean\n    for n_off in range(0, N, BLOCK_SIZE_N):\n        mask = n_off + tl.arange(0, BLOCK_SIZE_N) < N\n        X = tl.load(X_row_ptr + n_off, mask=mask, other=0.0)\n        acc += tl.sum(X, axis=0)\n\n    mean = acc / N\n\n    # Store the result\n    tl.store(Y_ptr, mean)\n\ndef mean_reduction(X):\n    M, N = X.shape\n    Y = torch.empty(M, dtype=X.dtype, device=X.device)\n\n    # Define the grid and block size\n    grid = lambda META: (M, )\n    BLOCK_SIZE_N = 256\n\n    # Launch the kernel\n    mean_reduction_kernel[grid](\n        X, Y, M, N, \n        X.stride(0), X.stride(1), Y.stride(0), \n        BLOCK_SIZE_N=BLOCK_SIZE_N\n    )\n    return Y",
    "operation": "mean_reduction",
    "input_shapes": [
      [
        128,
        1024
      ]
    ],
    "output_shape": [
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the sum reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    input_ptr = input_ptr + row * N\n    output_ptr = output_ptr + row\n\n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    input_ptrs = input_ptr + col_offsets + col_block * BLOCK_SIZE_N\n\n    accumulator = tl.zeros((1,), dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = col_offsets + col_block * BLOCK_SIZE_N < N\n        values = tl.load(input_ptrs, mask=mask, other=0.0)\n        accumulator += tl.sum(values, axis=0)\n        col_block += 1\n        input_ptrs += BLOCK_SIZE_N\n\n    tl.store(output_ptr, accumulator)\n\ndef sum_reduction(input, BLOCK_SIZE_N=256):\n    M, N = input.shape\n    output = torch.empty(M, device=input.device, dtype=torch.float32)\n\n    grid = lambda META: (M, triton.cdiv(N, META['BLOCK_SIZE_N']))\n    sum_reduction_kernel[grid](input, output, M, N, BLOCK_SIZE_N=BLOCK_SIZE_N)\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    input_ptr = input_ptr + row * N\n    output_ptr = output_ptr + row\n\n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    input_ptrs = input_ptr + col_offsets + col_block * BLOCK_SIZE_N\n\n    accumulator = tl.zeros((1,), dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = col_offsets + col_block * BLOCK_SIZE_N < N\n        values = tl.load(input_ptrs, mask=mask, other=0.0)\n        accumulator += tl.sum(values, axis=0)\n        col_block += 1\n        input_ptrs += BLOCK_SIZE_N\n\n    tl.store(output_ptr, accumulator)\n\ndef sum_reduction(input, BLOCK_SIZE_N=256):\n    M, N = input.shape\n    output = torch.empty(M, device=input.device, dtype=torch.float32)\n\n    grid = lambda META: (M, triton.cdiv(N, META['BLOCK_SIZE_N']))\n    sum_reduction_kernel[grid](input, output, M, N, BLOCK_SIZE_N=BLOCK_SIZE_N)\n    return output",
    "operation": "sum_reduction",
    "input_shapes": [
      [
        512,
        256
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the sum reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n\n    input_block_ptr = tl.make_block_ptr(\n        base=input_ptr, \n        shape=(M, N), \n        strides=(N, 1), \n        offsets=(offs_m[:, None], offs_n[None, :]), \n        block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_N), \n        order=(1, 0)\n    )\n\n    acc = tl.zeros((BLOCK_SIZE_M,), dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        input_block = tl.load(input_block_ptr, boundary_check=(0, 1))\n        acc += tl.sum(input_block, axis=1)\n        input_block_ptr = tl.advance(input_block_ptr, (0, BLOCK_SIZE_N))\n\n    output = acc.to(tl.float32)\n    output_offs = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    tl.store(output_ptr + output_offs, output, mask=output_offs < M)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n\n    input_block_ptr = tl.make_block_ptr(\n        base=input_ptr, \n        shape=(M, N), \n        strides=(N, 1), \n        offsets=(offs_m[:, None], offs_n[None, :]), \n        block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_N), \n        order=(1, 0)\n    )\n\n    acc = tl.zeros((BLOCK_SIZE_M,), dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        input_block = tl.load(input_block_ptr, boundary_check=(0, 1))\n        acc += tl.sum(input_block, axis=1)\n        input_block_ptr = tl.advance(input_block_ptr, (0, BLOCK_SIZE_N))\n\n    output = acc.to(tl.float32)\n    output_offs = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    tl.store(output_ptr + output_offs, output, mask=output_offs < M)",
    "operation": "sum_reduction",
    "input_shapes": [
      [
        128,
        512
      ]
    ],
    "output_shape": [
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the sum reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    col_block_idx = tl.program_id(1)\n\n    row_offs = row_idx\n    col_offs = col_block_idx * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n\n    input_ptr = input_ptr + row_offs * N\n    output_ptr = output_ptr + row_offs\n\n    acc = tl.zeros((1,), dtype=tl.float32)\n    for col_off in range(0, N, BLOCK_SIZE):\n        mask = col_offs < N\n        input_vals = tl.load(input_ptr + col_offs, mask=mask, other=0.0)\n        acc += tl.sum(input_vals, axis=0)\n        col_offs += BLOCK_SIZE\n\n    tl.store(output_ptr, acc[0])\n\ndef sum_reduction(x):\n    M, N = x.shape\n    BLOCK_SIZE = 256\n    output = torch.empty(M, dtype=x.dtype, device=x.device)\n    grid = lambda meta: (M, triton.cdiv(N, meta['BLOCK_SIZE']))\n    sum_reduction_kernel[grid](x, output, M, N, BLOCK_SIZE=BLOCK_SIZE)\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M: tl.constexpr, N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    col_block_idx = tl.program_id(1)\n\n    row_offs = row_idx\n    col_offs = col_block_idx * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n\n    input_ptr = input_ptr + row_offs * N\n    output_ptr = output_ptr + row_offs\n\n    acc = tl.zeros((1,), dtype=tl.float32)\n    for col_off in range(0, N, BLOCK_SIZE):\n        mask = col_offs < N\n        input_vals = tl.load(input_ptr + col_offs, mask=mask, other=0.0)\n        acc += tl.sum(input_vals, axis=0)\n        col_offs += BLOCK_SIZE\n\n    tl.store(output_ptr, acc[0])\n\ndef sum_reduction(x):\n    M, N = x.shape\n    BLOCK_SIZE = 256\n    output = torch.empty(M, dtype=x.dtype, device=x.device)\n    grid = lambda meta: (M, triton.cdiv(N, meta['BLOCK_SIZE']))\n    sum_reduction_kernel[grid](x, output, M, N, BLOCK_SIZE=BLOCK_SIZE)\n    return output",
    "operation": "sum_reduction",
    "input_shapes": [
      [
        512,
        512
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the min reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef min_reduction_kernel(\n    input_ptr, output_ptr, \n    M, N, \n    stride_input_M, stride_input_N, \n    stride_output_M,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    mask_m = offs_m < M\n\n    min_vals = tl.full([BLOCK_SIZE_M], float('inf'), dtype=tl.float32)\n\n    for start_n in range(0, N, BLOCK_SIZE_N):\n        curr_offs_n = start_n + offs_n\n        mask_n = curr_offs_n < N\n        mask = mask_m[:, None] & mask_n[None, :]\n        input = tl.load(input_ptr + (offs_m[:, None] * stride_input_M + curr_offs_n[None, :] * stride_input_N), mask=mask, other=float('inf'))\n        min_vals = tl.minimum(min_vals, tl.min(input, axis=1))\n\n    tl.store(output_ptr + offs_m * stride_output_M, min_vals, mask=mask_m)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef min_reduction_kernel(\n    input_ptr, output_ptr, \n    M, N, \n    stride_input_M, stride_input_N, \n    stride_output_M,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    mask_m = offs_m < M\n\n    min_vals = tl.full([BLOCK_SIZE_M], float('inf'), dtype=tl.float32)\n\n    for start_n in range(0, N, BLOCK_SIZE_N):\n        curr_offs_n = start_n + offs_n\n        mask_n = curr_offs_n < N\n        mask = mask_m[:, None] & mask_n[None, :]\n        input = tl.load(input_ptr + (offs_m[:, None] * stride_input_M + curr_offs_n[None, :] * stride_input_N), mask=mask, other=float('inf'))\n        min_vals = tl.minimum(min_vals, tl.min(input, axis=1))\n\n    tl.store(output_ptr + offs_m * stride_output_M, min_vals, mask=mask_m)",
    "operation": "min_reduction",
    "input_shapes": [
      [
        128,
        128
      ]
    ],
    "output_shape": [
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the max reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_input_m, \n    stride_input_n, \n    stride_output_m, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n\n    mask_m = offs_m < M\n\n    max_val = tl.full([BLOCK_SIZE_M], -float('inf'), dtype=tl.float32)\n\n    for start_n in range(0, N, BLOCK_SIZE_N):\n        offs = offs_m[:, None] * stride_input_m + (start_n + offs_n[None, :]) * stride_input_n\n        mask_n = start_n + offs_n < N\n        mask = mask_m[:, None] & mask_n[None, :]\n        vals = tl.load(input_ptr + offs, mask=mask, other=-float('inf'))\n        max_val = tl.maximum(max_val, tl.max(vals, axis=1))\n\n    offs_output = pid_m * stride_output_m\n    tl.store(output_ptr + offs_output, max_val, mask=mask_m)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_input_m, \n    stride_input_n, \n    stride_output_m, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n\n    mask_m = offs_m < M\n\n    max_val = tl.full([BLOCK_SIZE_M], -float('inf'), dtype=tl.float32)\n\n    for start_n in range(0, N, BLOCK_SIZE_N):\n        offs = offs_m[:, None] * stride_input_m + (start_n + offs_n[None, :]) * stride_input_n\n        mask_n = start_n + offs_n < N\n        mask = mask_m[:, None] & mask_n[None, :]\n        vals = tl.load(input_ptr + offs, mask=mask, other=-float('inf'))\n        max_val = tl.maximum(max_val, tl.max(vals, axis=1))\n\n    offs_output = pid_m * stride_output_m\n    tl.store(output_ptr + offs_output, max_val, mask=mask_m)",
    "operation": "max_reduction",
    "input_shapes": [
      [
        256,
        512
      ]
    ],
    "output_shape": [
      256
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the max reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col = tl.program_id(1)\n\n    row_offset = row * N\n    col_offsets = col * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    max_val = tl.where(col_offsets < N, tl.load(input_ptr + row_offset + col_offsets), -float('inf'))\n    for i in range(1, tl.cdiv(N, BLOCK_SIZE_N)):\n        col_offsets = col_offsets + BLOCK_SIZE_N\n        max_val = tl.maximum(max_val, tl.where(col_offsets < N, tl.load(input_ptr + row_offset + col_offsets), -float('inf')))\n\n    tl.store(output_ptr + row, tl.max(max_val, axis=0))\n\ndef max_reduce(input, output):\n    M, N = input.shape\n    grid = lambda META: (M, triton.cdiv(N, META['BLOCK_SIZE_N']))\n    max_reduce_kernel[grid](input, output, M, N, BLOCK_SIZE_M=1, BLOCK_SIZE_N=256)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col = tl.program_id(1)\n\n    row_offset = row * N\n    col_offsets = col * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    max_val = tl.where(col_offsets < N, tl.load(input_ptr + row_offset + col_offsets), -float('inf'))\n    for i in range(1, tl.cdiv(N, BLOCK_SIZE_N)):\n        col_offsets = col_offsets + BLOCK_SIZE_N\n        max_val = tl.maximum(max_val, tl.where(col_offsets < N, tl.load(input_ptr + row_offset + col_offsets), -float('inf')))\n\n    tl.store(output_ptr + row, tl.max(max_val, axis=0))\n\ndef max_reduce(input, output):\n    M, N = input.shape\n    grid = lambda META: (M, triton.cdiv(N, META['BLOCK_SIZE_N']))\n    max_reduce_kernel[grid](input, output, M, N, BLOCK_SIZE_M=1, BLOCK_SIZE_N=256)",
    "operation": "max_reduction",
    "input_shapes": [
      [
        1024,
        1024
      ]
    ],
    "output_shape": [
      1024
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the max reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    max_val = tl.full([BLOCK_SIZE_N], float('-inf'), dtype=tl.float32)\n\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        val = tl.load(input_ptr + offs_n, mask=mask, other=float('-inf'))\n        max_val = tl.maximum(max_val, val)\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n\n    max_val = tl.max(max_val, axis=0)\n    tl.store(output_ptr, max_val)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n\n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    max_val = tl.full([BLOCK_SIZE_N], float('-inf'), dtype=tl.float32)\n\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        val = tl.load(input_ptr + offs_n, mask=mask, other=float('-inf'))\n        max_val = tl.maximum(max_val, val)\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n\n    max_val = tl.max(max_val, axis=0)\n    tl.store(output_ptr, max_val)",
    "operation": "max_reduction",
    "input_shapes": [
      [
        128,
        1024
      ]
    ],
    "output_shape": [
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the mean reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    X_ptr,  # Pointer to input tensor\n    Y_ptr,  # Pointer to output tensor\n    M,      # Number of rows in input tensor\n    N,      # Number of columns in input tensor\n    stride_xm,  # Stride of input tensor along M dimension\n    stride_xn,  # Stride of input tensor along N dimension\n    stride_y,   # Stride of output tensor\n    BLOCK_SIZE_N: tl.constexpr,  # Block size along N dimension\n):\n    # Get the row index\n    row_idx = tl.program_id(0)\n\n    # Calculate the base offset for the current row\n    row_base_offset = row_idx * stride_xm\n\n    # Initialize accumulator for mean calculation\n    mean_acc = tl.zeros([1], dtype=tl.float32)\n\n    # Iterate over blocks of N dimension\n    for n_block_start in range(0, N, BLOCK_SIZE_N):\n        # Calculate the mask for the current block\n        mask = n_block_start + tl.arange(0, BLOCK_SIZE_N) < N\n\n        # Load the elements of the current block\n        x = tl.load(\n            X_ptr + row_base_offset + n_block_start * stride_xn,\n            mask=mask,\n            other=0.0,\n        )\n\n        # Accumulate the sum\n        mean_acc += tl.sum(x, axis=0)\n\n    # Calculate the mean\n    mean = mean_acc / N\n\n    # Store the result\n    tl.store(Y_ptr + row_idx * stride_y, mean)\n\n# Example usage would require a separate function to launch the kernel\n# with proper configuration and arguments.\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    X_ptr,  # Pointer to input tensor\n    Y_ptr,  # Pointer to output tensor\n    M,      # Number of rows in input tensor\n    N,      # Number of columns in input tensor\n    stride_xm,  # Stride of input tensor along M dimension\n    stride_xn,  # Stride of input tensor along N dimension\n    stride_y,   # Stride of output tensor\n    BLOCK_SIZE_N: tl.constexpr,  # Block size along N dimension\n):\n    # Get the row index\n    row_idx = tl.program_id(0)\n\n    # Calculate the base offset for the current row\n    row_base_offset = row_idx * stride_xm\n\n    # Initialize accumulator for mean calculation\n    mean_acc = tl.zeros([1], dtype=tl.float32)\n\n    # Iterate over blocks of N dimension\n    for n_block_start in range(0, N, BLOCK_SIZE_N):\n        # Calculate the mask for the current block\n        mask = n_block_start + tl.arange(0, BLOCK_SIZE_N) < N\n\n        # Load the elements of the current block\n        x = tl.load(\n            X_ptr + row_base_offset + n_block_start * stride_xn,\n            mask=mask,\n            other=0.0,\n        )\n\n        # Accumulate the sum\n        mean_acc += tl.sum(x, axis=0)\n\n    # Calculate the mean\n    mean = mean_acc / N\n\n    # Store the result\n    tl.store(Y_ptr + row_idx * stride_y, mean)\n\n# Example usage would require a separate function to launch the kernel\n# with proper configuration and arguments.",
    "operation": "mean_reduction",
    "input_shapes": [
      [
        256,
        256
      ]
    ],
    "output_shape": [
      256
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the mean reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    X_ptr,  # Pointer to input tensor\n    Y_ptr,  # Pointer to output tensor\n    M,      # Number of rows in input tensor\n    N,      # Number of columns in input tensor\n    stride_xm,  # Stride of X along the M dimension\n    stride_xn,  # Stride of X along the N dimension\n    BLOCK_SIZE_N: tl.constexpr,  # Block size along the N dimension\n):\n    # Get the row index\n    row_idx = tl.program_id(0)\n\n    # Calculate the base offset for the current row\n    row_base_offset = row_idx * stride_xm\n\n    # Initialize accumulator\n    accumulator = tl.zeros([1], dtype=tl.float32)\n\n    # Loop over the columns in blocks\n    for col_start_idx in range(0, N, BLOCK_SIZE_N):\n        # Calculate the mask for the current block\n        col_mask = col_start_idx + tl.arange(0, BLOCK_SIZE_N) < N\n\n        # Calculate the offset for the current block\n        offset = row_base_offset + col_start_idx * stride_xn\n\n        # Load the current block with masking\n        x = tl.load(X_ptr + offset, mask=col_mask, other=0.0)\n\n        # Accumulate the sum\n        accumulator += tl.sum(x, axis=0)\n\n    # Calculate the mean\n    mean = accumulator / N\n\n    # Store the result\n    tl.store(Y_ptr + row_idx, mean)\n\n# Example usage constants (not part of the kernel code)\nBLOCK_SIZE_N = 256\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    X_ptr,  # Pointer to input tensor\n    Y_ptr,  # Pointer to output tensor\n    M,      # Number of rows in input tensor\n    N,      # Number of columns in input tensor\n    stride_xm,  # Stride of X along the M dimension\n    stride_xn,  # Stride of X along the N dimension\n    BLOCK_SIZE_N: tl.constexpr,  # Block size along the N dimension\n):\n    # Get the row index\n    row_idx = tl.program_id(0)\n\n    # Calculate the base offset for the current row\n    row_base_offset = row_idx * stride_xm\n\n    # Initialize accumulator\n    accumulator = tl.zeros([1], dtype=tl.float32)\n\n    # Loop over the columns in blocks\n    for col_start_idx in range(0, N, BLOCK_SIZE_N):\n        # Calculate the mask for the current block\n        col_mask = col_start_idx + tl.arange(0, BLOCK_SIZE_N) < N\n\n        # Calculate the offset for the current block\n        offset = row_base_offset + col_start_idx * stride_xn\n\n        # Load the current block with masking\n        x = tl.load(X_ptr + offset, mask=col_mask, other=0.0)\n\n        # Accumulate the sum\n        accumulator += tl.sum(x, axis=0)\n\n    # Calculate the mean\n    mean = accumulator / N\n\n    # Store the result\n    tl.store(Y_ptr + row_idx, mean)\n\n# Example usage constants (not part of the kernel code)\nBLOCK_SIZE_N = 256",
    "operation": "mean_reduction",
    "input_shapes": [
      [
        512,
        128
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the min reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef min_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    mask_m = offs_m < M\n    mask_n = offs_n < N\n\n    min_val = tl.maxconst\n\n    for n in range(0, N, BLOCK_SIZE_N):\n        mask = mask_m[:, None] & (offs_n[None, :] < N)\n        val = tl.load(input_ptr + offs_m[:, None] * N + n + offs_n[None, :], mask=mask, other=tl.maxconst)\n        min_val = tl.minimum(min_val, tl.min(val, axis=1))\n\n    tl.store(output_ptr + offs_m, min_val, mask=mask_m)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef min_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    mask_m = offs_m < M\n    mask_n = offs_n < N\n\n    min_val = tl.maxconst\n\n    for n in range(0, N, BLOCK_SIZE_N):\n        mask = mask_m[:, None] & (offs_n[None, :] < N)\n        val = tl.load(input_ptr + offs_m[:, None] * N + n + offs_n[None, :], mask=mask, other=tl.maxconst)\n        min_val = tl.minimum(min_val, tl.min(val, axis=1))\n\n    tl.store(output_ptr + offs_m, min_val, mask=mask_m)",
    "operation": "min_reduction",
    "input_shapes": [
      [
        1024,
        1024
      ]
    ],
    "output_shape": [
      1024
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the min reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef min_reduction_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_M, \n    stride_N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    output_row = row\n    input_row = row * stride_M\n    \n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    input_ptrs = input_ptr + input_row + col_offsets\n    \n    min_val = tl.full([BLOCK_SIZE_N], float('inf'), dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = col_offsets < N\n        val = tl.load(input_ptrs, mask=mask, other=float('inf'))\n        min_val = tl.minimum(min_val, val)\n        col_offsets += BLOCK_SIZE_N\n        input_ptrs += BLOCK_SIZE_N\n    \n    min_val = tl.min(min_val, axis=0)\n    tl.store(output_ptr + output_row, min_val)\n\ndef min_reduction(x):\n    M, N = x.shape\n    output = torch.empty(M, dtype=x.dtype, device=x.device)\n    grid = lambda meta: (M,)\n    BLOCK_SIZE_N = 1024\n    min_reduction_kernel[grid](\n        x, \n        output, \n        M, \n        N, \n        x.stride(0), \n        x.stride(1), \n        BLOCK_SIZE_N=BLOCK_SIZE_N\n    )\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef min_reduction_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_M, \n    stride_N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    output_row = row\n    input_row = row * stride_M\n    \n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    input_ptrs = input_ptr + input_row + col_offsets\n    \n    min_val = tl.full([BLOCK_SIZE_N], float('inf'), dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = col_offsets < N\n        val = tl.load(input_ptrs, mask=mask, other=float('inf'))\n        min_val = tl.minimum(min_val, val)\n        col_offsets += BLOCK_SIZE_N\n        input_ptrs += BLOCK_SIZE_N\n    \n    min_val = tl.min(min_val, axis=0)\n    tl.store(output_ptr + output_row, min_val)\n\ndef min_reduction(x):\n    M, N = x.shape\n    output = torch.empty(M, dtype=x.dtype, device=x.device)\n    grid = lambda meta: (M,)\n    BLOCK_SIZE_N = 1024\n    min_reduction_kernel[grid](\n        x, \n        output, \n        M, \n        N, \n        x.stride(0), \n        x.stride(1), \n        BLOCK_SIZE_N=BLOCK_SIZE_N\n    )\n    return output",
    "operation": "min_reduction",
    "input_shapes": [
      [
        256,
        512
      ]
    ],
    "output_shape": [
      256
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the max reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_M, \n    stride_N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    col_block_idx = tl.program_id(1)\n\n    row_offs = row_idx * stride_M\n    col_offs = col_block_idx * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    max_val = -float('inf')\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = col_offs < N\n        val = tl.load(input_ptr + row_offs + col_offs * stride_N, mask=mask, other=-float('inf'))\n        max_val = tl.maximum(max_val, tl.max(val, axis=0))\n        col_offs += BLOCK_SIZE_N\n\n    tl.store(output_ptr + row_idx, max_val)\n\ndef max_reduce(input, BLOCK_SIZE_N: int = 256):\n    M, N = input.shape\n    output = torch.empty(M, device=input.device, dtype=input.dtype)\n\n    grid = lambda META: (M, triton.cdiv(N, META['BLOCK_SIZE_N']))\n    max_reduce_kernel[grid](input, output, M, N, input.stride(0), input.stride(1), BLOCK_SIZE_N=BLOCK_SIZE_N)\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_M, \n    stride_N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    col_block_idx = tl.program_id(1)\n\n    row_offs = row_idx * stride_M\n    col_offs = col_block_idx * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    max_val = -float('inf')\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = col_offs < N\n        val = tl.load(input_ptr + row_offs + col_offs * stride_N, mask=mask, other=-float('inf'))\n        max_val = tl.maximum(max_val, tl.max(val, axis=0))\n        col_offs += BLOCK_SIZE_N\n\n    tl.store(output_ptr + row_idx, max_val)\n\ndef max_reduce(input, BLOCK_SIZE_N: int = 256):\n    M, N = input.shape\n    output = torch.empty(M, device=input.device, dtype=input.dtype)\n\n    grid = lambda META: (M, triton.cdiv(N, META['BLOCK_SIZE_N']))\n    max_reduce_kernel[grid](input, output, M, N, input.stride(0), input.stride(1), BLOCK_SIZE_N=BLOCK_SIZE_N)\n    return output",
    "operation": "max_reduction",
    "input_shapes": [
      [
        512,
        1024
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the mean reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    input_ptr, output_ptr, \n    M, N, \n    stride_input_M, stride_input_N, \n    stride_output_M, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    col_block_idx = tl.program_id(1)\n\n    row_offs = row_idx\n    col_offs = col_block_idx * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    input_ptr = input_ptr + row_offs * stride_input_M\n    accumulator = tl.zeros((BLOCK_SIZE_N,), dtype=tl.float32)\n\n    mask = col_offs < N\n    accumulator += tl.load(input_ptr + col_offs, mask=mask, other=0.0)\n\n    for _ in range(1, tl.cdiv(N, BLOCK_SIZE_N)):\n        col_offs += BLOCK_SIZE_N\n        mask = col_offs < N\n        accumulator += tl.load(input_ptr + col_offs, mask=mask, other=0.0)\n\n    mean = tl.sum(accumulator, axis=0) / N\n    output_ptr = output_ptr + row_offs * stride_output_M\n    tl.store(output_ptr, mean)\n\ndef mean_reduction(input, BLOCK_SIZE_N=256):\n    M, N = input.shape\n    output = torch.empty(M, device=input.device, dtype=torch.float32)\n\n    grid = lambda META: (M, triton.cdiv(N, META['BLOCK_SIZE_N']))\n    mean_reduction_kernel[grid](\n        input, output, \n        M, N, \n        input.stride(0), input.stride(1), \n        output.stride(0), \n        BLOCK_SIZE_N=BLOCK_SIZE_N\n    )\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    input_ptr, output_ptr, \n    M, N, \n    stride_input_M, stride_input_N, \n    stride_output_M, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    col_block_idx = tl.program_id(1)\n\n    row_offs = row_idx\n    col_offs = col_block_idx * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    input_ptr = input_ptr + row_offs * stride_input_M\n    accumulator = tl.zeros((BLOCK_SIZE_N,), dtype=tl.float32)\n\n    mask = col_offs < N\n    accumulator += tl.load(input_ptr + col_offs, mask=mask, other=0.0)\n\n    for _ in range(1, tl.cdiv(N, BLOCK_SIZE_N)):\n        col_offs += BLOCK_SIZE_N\n        mask = col_offs < N\n        accumulator += tl.load(input_ptr + col_offs, mask=mask, other=0.0)\n\n    mean = tl.sum(accumulator, axis=0) / N\n    output_ptr = output_ptr + row_offs * stride_output_M\n    tl.store(output_ptr, mean)\n\ndef mean_reduction(input, BLOCK_SIZE_N=256):\n    M, N = input.shape\n    output = torch.empty(M, device=input.device, dtype=torch.float32)\n\n    grid = lambda META: (M, triton.cdiv(N, META['BLOCK_SIZE_N']))\n    mean_reduction_kernel[grid](\n        input, output, \n        M, N, \n        input.stride(0), input.stride(1), \n        output.stride(0), \n        BLOCK_SIZE_N=BLOCK_SIZE_N\n    )\n    return output",
    "operation": "mean_reduction",
    "input_shapes": [
      [
        1024,
        1024
      ]
    ],
    "output_shape": [
      1024
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the mean reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    X,  # input tensor\n    Y,  # output tensor\n    M,  # number of rows in X\n    N,  # number of columns in X\n    stride_xm,  # stride of X along M dimension\n    stride_xn,  # stride of X along N dimension\n    stride_ym,  # stride of Y along M dimension\n    BLOCK_SIZE: tl.constexpr,\n):\n    # program id\n    pid_m = tl.program_id(0)\n\n    # compute offsets\n    offs_n = tl.arange(0, BLOCK_SIZE)\n    offs_m = pid_m * stride_xm + tl.zeros([BLOCK_SIZE], dtype=tl.int64)\n\n    # accumulate\n    acc = tl.zeros([BLOCK_SIZE], dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE)):\n        offs = offs_m + offs_n * stride_xn\n        mask = offs_n < N\n        x = tl.load(X + offs, mask=mask, other=0.0)\n        acc += x\n        offs_n += BLOCK_SIZE\n\n    # compute mean\n    mean = acc / N\n\n    # store result\n    tl.store(Y + pid_m * stride_ym, tl.sum(mean))\n\ndef mean_reduction(X):\n    M, N = X.shape\n    Y = torch.empty(M, device=X.device, dtype=torch.float32)\n\n    # launch kernel\n    grid = lambda META: (M,)\n    mean_reduction_kernel[grid](\n        X, Y, M, N,\n        X.stride(0), X.stride(1),\n        Y.stride(0),\n        BLOCK_SIZE=1024,\n    )\n    return Y\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_reduction_kernel(\n    X,  # input tensor\n    Y,  # output tensor\n    M,  # number of rows in X\n    N,  # number of columns in X\n    stride_xm,  # stride of X along M dimension\n    stride_xn,  # stride of X along N dimension\n    stride_ym,  # stride of Y along M dimension\n    BLOCK_SIZE: tl.constexpr,\n):\n    # program id\n    pid_m = tl.program_id(0)\n\n    # compute offsets\n    offs_n = tl.arange(0, BLOCK_SIZE)\n    offs_m = pid_m * stride_xm + tl.zeros([BLOCK_SIZE], dtype=tl.int64)\n\n    # accumulate\n    acc = tl.zeros([BLOCK_SIZE], dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE)):\n        offs = offs_m + offs_n * stride_xn\n        mask = offs_n < N\n        x = tl.load(X + offs, mask=mask, other=0.0)\n        acc += x\n        offs_n += BLOCK_SIZE\n\n    # compute mean\n    mean = acc / N\n\n    # store result\n    tl.store(Y + pid_m * stride_ym, tl.sum(mean))\n\ndef mean_reduction(X):\n    M, N = X.shape\n    Y = torch.empty(M, device=X.device, dtype=torch.float32)\n\n    # launch kernel\n    grid = lambda META: (M,)\n    mean_reduction_kernel[grid](\n        X, Y, M, N,\n        X.stride(0), X.stride(1),\n        Y.stride(0),\n        BLOCK_SIZE=1024,\n    )\n    return Y",
    "operation": "mean_reduction",
    "input_shapes": [
      [
        512,
        512
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the sum reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    input_ptr = input_ptr + row * N\n    output_ptr = output_ptr + row\n\n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    col = col_block * BLOCK_SIZE_N + col_offsets\n\n    mask = col < N\n    sum = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n\n    sum = tl.where(mask, tl.load(input_ptr + col), 0.0)\n    for _ in range(1):\n        tl.store(output_ptr, tl.sum(sum, axis=0))\n\n    # For larger N, we need to do a proper reduction\n    # But for simplicity, let's assume N is relatively small\n    # and we can do it in a single block.\n\n# For larger N, a more complex reduction is needed:\n@triton.jit\ndef sum_reduction_kernel_large_n(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_M: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    input_ptr = input_ptr + row * N\n    output_ptr = output_ptr + row\n\n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    col = col_block * BLOCK_SIZE_N + col_offsets\n\n    mask = col < N\n    sum = tl.sum(tl.where(mask, tl.load(input_ptr + col), 0.0), axis=0)\n\n    tl.store(output_ptr, sum)\n\n# However, for a more robust and efficient solution:\n@triton.jit\ndef sum_reduction_kernel_robust(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid = tl.program_id(0)\n    row = pid // tl.num_programs(1)\n    col_block = pid % tl.num_programs(1)\n\n    input_ptr = input_ptr + row * N\n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    col = col_block * BLOCK_SIZE_N + col_offsets\n\n    mask = col < N\n    sum = tl.sum(tl.where(mask, tl.load(input_ptr + col), 0.0), axis=0)\n\n    output_ptr = output_ptr + row\n    tl.store(output_ptr, sum)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    input_ptr = input_ptr + row * N\n    output_ptr = output_ptr + row\n\n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    col = col_block * BLOCK_SIZE_N + col_offsets\n\n    mask = col < N\n    sum = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n\n    sum = tl.where(mask, tl.load(input_ptr + col), 0.0)\n    for _ in range(1):\n        tl.store(output_ptr, tl.sum(sum, axis=0))\n\n    # For larger N, we need to do a proper reduction\n    # But for simplicity, let's assume N is relatively small\n    # and we can do it in a single block.\n\n# For larger N, a more complex reduction is needed:\n@triton.jit\ndef sum_reduction_kernel_large_n(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_M: tl.constexpr\n):\n    row = tl.program_id(0)\n    col_block = tl.program_id(1)\n\n    input_ptr = input_ptr + row * N\n    output_ptr = output_ptr + row\n\n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    col = col_block * BLOCK_SIZE_N + col_offsets\n\n    mask = col < N\n    sum = tl.sum(tl.where(mask, tl.load(input_ptr + col), 0.0), axis=0)\n\n    tl.store(output_ptr, sum)\n\n# However, for a more robust and efficient solution:\n@triton.jit\ndef sum_reduction_kernel_robust(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid = tl.program_id(0)\n    row = pid // tl.num_programs(1)\n    col_block = pid % tl.num_programs(1)\n\n    input_ptr = input_ptr + row * N\n    col_offsets = tl.arange(0, BLOCK_SIZE_N)\n    col = col_block * BLOCK_SIZE_N + col_offsets\n\n    mask = col < N\n    sum = tl.sum(tl.where(mask, tl.load(input_ptr + col), 0.0), axis=0)\n\n    output_ptr = output_ptr + row\n    tl.store(output_ptr, sum)",
    "operation": "sum_reduction",
    "input_shapes": [
      [
        128,
        1024
      ]
    ],
    "output_shape": [
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and number of programs\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the range for the current program\n    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A and B\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator for the result\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over K in blocks\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load blocks of A and B with masking\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n\n        # Perform computation\n        accumulator += tl.dot(a, b)\n\n        # Advance pointers for A and B\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, accumulator, mask=c_mask)\n\ndef matmul(a, b):\n    # Check shapes\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate output\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # 1D grid for matmul kernel\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch kernel\n    matmul_kernel[grid](\n        a, b, c, M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and number of programs\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the range for the current program\n    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A and B\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator for the result\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over K in blocks\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load blocks of A and B with masking\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n\n        # Perform computation\n        accumulator += tl.dot(a, b)\n\n        # Advance pointers for A and B\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, accumulator, mask=c_mask)\n\ndef matmul(a, b):\n    # Check shapes\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate output\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # 1D grid for matmul kernel\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch kernel\n    matmul_kernel[grid](\n        a, b, c, M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c",
    "operation": "matmul",
    "input_shapes": [
      [
        512,
        256
      ],
      [
        256,
        256
      ]
    ],
    "output_shape": [
      512,
      256
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block IDs\n    block_m = pid_m * BLOCK_SIZE_M\n    block_n = pid_n * BLOCK_SIZE_N\n\n    # Initialize pointers to A, B, and C\n    A_block_ptr = tl.make_block_ptr(\n        base=A_ptr, shape=(M, K), strides=(stride_am, stride_ak),\n        offsets=(block_m, 0), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_K), order=(1, 0)\n    )\n    B_block_ptr = tl.make_block_ptr(\n        base=B_ptr, shape=(K, N), strides=(stride_bk, stride_bn),\n        offsets=(0, block_n), block_shape=(BLOCK_SIZE_K, BLOCK_SIZE_N), order=(1, 0)\n    )\n    C_block_ptr = tl.make_block_ptr(\n        base=C_ptr, shape=(M, N), strides=(stride_cm, stride_cn),\n        offsets=(block_m, block_n), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_N), order=(1, 0)\n    )\n\n    # Initialize accumulator\n    acc = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over K dimension\n    for _ in range(0, K, BLOCK_SIZE_K):\n        # Load A and B blocks\n        A = tl.load(A_block_ptr, boundary_check=(1, 0))\n        B = tl.load(B_block_ptr, boundary_check=(0, 1))\n\n        # Update accumulator\n        acc += tl.dot(A, B)\n\n        # Advance A and B block pointers\n        A_block_ptr = tl.advance(A_block_ptr, (0, BLOCK_SIZE_K))\n        B_block_ptr = tl.advance(B_block_ptr, (BLOCK_SIZE_K, 0))\n\n    # Store result to C\n    tl.store(C_block_ptr, acc.to(C_block_ptr.dtype.element_ty), boundary_check=(0, 1))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block IDs\n    block_m = pid_m * BLOCK_SIZE_M\n    block_n = pid_n * BLOCK_SIZE_N\n\n    # Initialize pointers to A, B, and C\n    A_block_ptr = tl.make_block_ptr(\n        base=A_ptr, shape=(M, K), strides=(stride_am, stride_ak),\n        offsets=(block_m, 0), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_K), order=(1, 0)\n    )\n    B_block_ptr = tl.make_block_ptr(\n        base=B_ptr, shape=(K, N), strides=(stride_bk, stride_bn),\n        offsets=(0, block_n), block_shape=(BLOCK_SIZE_K, BLOCK_SIZE_N), order=(1, 0)\n    )\n    C_block_ptr = tl.make_block_ptr(\n        base=C_ptr, shape=(M, N), strides=(stride_cm, stride_cn),\n        offsets=(block_m, block_n), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_N), order=(1, 0)\n    )\n\n    # Initialize accumulator\n    acc = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over K dimension\n    for _ in range(0, K, BLOCK_SIZE_K):\n        # Load A and B blocks\n        A = tl.load(A_block_ptr, boundary_check=(1, 0))\n        B = tl.load(B_block_ptr, boundary_check=(0, 1))\n\n        # Update accumulator\n        acc += tl.dot(A, B)\n\n        # Advance A and B block pointers\n        A_block_ptr = tl.advance(A_block_ptr, (0, BLOCK_SIZE_K))\n        B_block_ptr = tl.advance(B_block_ptr, (BLOCK_SIZE_K, 0))\n\n    # Store result to C\n    tl.store(C_block_ptr, acc.to(C_block_ptr.dtype.element_ty), boundary_check=(0, 1))",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        256
      ],
      [
        256,
        128
      ]
    ],
    "output_shape": [
      256,
      128
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = a_ptr + offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak\n    b_ptrs = b_ptr + offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator.to(tl.float16)\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, c, mask=c_mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = a_ptr + offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak\n    b_ptrs = b_ptr + offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator.to(tl.float16)\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, c, mask=c_mask)",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        256
      ],
      [
        256,
        256
      ]
    ],
    "output_shape": [
      256,
      256
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define BLOCK_SIZE constants\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program IDs and TL constants\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate block IDs\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize accumulators\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Load data and compute\n    for k in range(0, K, BLOCK_SIZE_K):\n        a_ptrs = a_ptr + (offs_am[:, None] * stride_am + (k + offs_k[None, :]) * stride_ak)\n        b_ptrs = b_ptr + ((k + offs_k[:, None]) * stride_bk + offs_bn[None, :] * stride_bn)\n\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        accumulator += tl.dot(a, b)\n\n    # Store results\n    c_ptrs = c_ptr + (offs_am[:, None] * stride_cm + offs_bn[None, :] * stride_cn)\n    tl.store(c_ptrs, accumulator, mask=(offs_am[:, None] < M) & (offs_bn[None, :] < N))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define BLOCK_SIZE constants\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program IDs and TL constants\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate block IDs\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize accumulators\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Load data and compute\n    for k in range(0, K, BLOCK_SIZE_K):\n        a_ptrs = a_ptr + (offs_am[:, None] * stride_am + (k + offs_k[None, :]) * stride_ak)\n        b_ptrs = b_ptr + ((k + offs_k[:, None]) * stride_bk + offs_bn[None, :] * stride_bn)\n\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        accumulator += tl.dot(a, b)\n\n    # Store results\n    c_ptrs = c_ptr + (offs_am[:, None] * stride_cm + offs_bn[None, :] * stride_cn)\n    tl.store(c_ptrs, accumulator, mask=(offs_am[:, None] < M) & (offs_bn[None, :] < N))",
    "operation": "matmul",
    "input_shapes": [
      [
        512,
        256
      ],
      [
        256,
        512
      ]
    ],
    "output_shape": [
      512,
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to A, B, and C blocks\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    c = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform tile-based matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load A and B tiles\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform computation on A and B tiles\n        c += tl.dot(a, b)\n\n        # Move pointers to the next K block\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n\ndef matmul(a, b):\n    # Check shapes\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate output\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Define grid dimensions\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch kernel\n    matmul_kernel[grid](\n        a, b, c, M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to A, B, and C blocks\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    c = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform tile-based matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load A and B tiles\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform computation on A and B tiles\n        c += tl.dot(a, b)\n\n        # Move pointers to the next K block\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n\ndef matmul(a, b):\n    # Check shapes\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate output\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Define grid dimensions\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch kernel\n    matmul_kernel[grid](\n        a, b, c, M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c",
    "operation": "matmul",
    "input_shapes": [
      [
        512,
        512
      ],
      [
        512,
        512
      ]
    ],
    "output_shape": [
      512,
      512
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr = BLOCK_SIZE_M,\n    BLOCK_SIZE_N: tl.constexpr = BLOCK_SIZE_N,\n    BLOCK_SIZE_K: tl.constexpr = BLOCK_SIZE_K,\n):\n    # Program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to A, B, and accumulator\n    a_ptrs = A_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = B_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Compute tile-based matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, accumulator, mask=c_mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr = BLOCK_SIZE_M,\n    BLOCK_SIZE_N: tl.constexpr = BLOCK_SIZE_N,\n    BLOCK_SIZE_K: tl.constexpr = BLOCK_SIZE_K,\n):\n    # Program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to A, B, and accumulator\n    a_ptrs = A_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = B_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Compute tile-based matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, accumulator, mask=c_mask)",
    "operation": "matmul",
    "input_shapes": [
      [
        128,
        256
      ],
      [
        256,
        128
      ]
    ],
    "output_shape": [
      128,
      128
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate block IDs\n    block_m = pid_m * BLOCK_SIZE_M\n    block_n = pid_n * BLOCK_SIZE_N\n\n    # Initialize pointers to A and B blocks\n    a_block_ptr = tl.make_block_ptr(\n        base=a_ptr, shape=(M, K), strides=(stride_am, stride_ak),\n        offsets=(block_m, 0), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_K), order=(1, 0)\n    )\n    b_block_ptr = tl.make_block_ptr(\n        base=b_ptr, shape=(K, N), strides=(stride_bk, stride_bn),\n        offsets=(0, block_n), block_shape=(BLOCK_SIZE_K, BLOCK_SIZE_N), order=(1, 0)\n    )\n\n    # Initialize accumulator\n    acc = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform tile-based computation\n    for _ in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_block_ptr, boundary_check=(0, 1))\n        b = tl.load(b_block_ptr, boundary_check=(0, 1))\n        acc += tl.dot(a, b)\n        a_block_ptr = tl.advance(a_block_ptr, (0, BLOCK_SIZE_K))\n        b_block_ptr = tl.advance(b_block_ptr, (BLOCK_SIZE_K, 0))\n\n    # Store result to C\n    c_block_ptr = tl.make_block_ptr(\n        base=c_ptr, shape=(M, N), strides=(stride_cm, stride_cn),\n        offsets=(block_m, block_n), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_N), order=(1, 0)\n    )\n    tl.store(c_block_ptr, acc.to(c_ptr.dtype.element_ty), boundary_check=(0, 1))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate block IDs\n    block_m = pid_m * BLOCK_SIZE_M\n    block_n = pid_n * BLOCK_SIZE_N\n\n    # Initialize pointers to A and B blocks\n    a_block_ptr = tl.make_block_ptr(\n        base=a_ptr, shape=(M, K), strides=(stride_am, stride_ak),\n        offsets=(block_m, 0), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_K), order=(1, 0)\n    )\n    b_block_ptr = tl.make_block_ptr(\n        base=b_ptr, shape=(K, N), strides=(stride_bk, stride_bn),\n        offsets=(0, block_n), block_shape=(BLOCK_SIZE_K, BLOCK_SIZE_N), order=(1, 0)\n    )\n\n    # Initialize accumulator\n    acc = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform tile-based computation\n    for _ in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_block_ptr, boundary_check=(0, 1))\n        b = tl.load(b_block_ptr, boundary_check=(0, 1))\n        acc += tl.dot(a, b)\n        a_block_ptr = tl.advance(a_block_ptr, (0, BLOCK_SIZE_K))\n        b_block_ptr = tl.advance(b_block_ptr, (BLOCK_SIZE_K, 0))\n\n    # Store result to C\n    c_block_ptr = tl.make_block_ptr(\n        base=c_ptr, shape=(M, N), strides=(stride_cm, stride_cn),\n        offsets=(block_m, block_n), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_N), order=(1, 0)\n    )\n    tl.store(c_block_ptr, acc.to(c_ptr.dtype.element_ty), boundary_check=(0, 1))",
    "operation": "matmul",
    "input_shapes": [
      [
        128,
        512
      ],
      [
        512,
        128
      ]
    ],
    "output_shape": [
      128,
      128
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block IDs\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    # Initialize pointers to A, B, and C blocks\n    a_ptrs = a_ptr + offs_m[:, None] * stride_am + tl.arange(0, BLOCK_SIZE_K)[None, :] * stride_ak\n    b_ptrs = b_ptr + tl.arange(0, BLOCK_SIZE_K)[:, None] * stride_bk + offs_n[None, :] * stride_bn\n    c = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(offs_m[:, None] < M) & (tl.arange(0, BLOCK_SIZE_K)[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(tl.arange(0, BLOCK_SIZE_K)[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n        c += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block IDs\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    # Initialize pointers to A, B, and C blocks\n    a_ptrs = a_ptr + offs_m[:, None] * stride_am + tl.arange(0, BLOCK_SIZE_K)[None, :] * stride_ak\n    b_ptrs = b_ptr + tl.arange(0, BLOCK_SIZE_K)[:, None] * stride_bk + offs_n[None, :] * stride_bn\n    c = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(offs_m[:, None] < M) & (tl.arange(0, BLOCK_SIZE_K)[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(tl.arange(0, BLOCK_SIZE_K)[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n        c += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))",
    "operation": "matmul",
    "input_shapes": [
      [
        128,
        256
      ],
      [
        256,
        256
      ]
    ],
    "output_shape": [
      128,
      256
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Extract the current program's block indices\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the offsets for the current block\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers for the current block\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator for the current block\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the current block from A and B with masking\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product for the current block\n        accumulator += tl.dot(a, b)\n\n        # Advance the pointers for the next iteration\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Calculate the output offset and store the result with masking\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    tl.store(c_ptrs, accumulator, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n\ndef matmul(a, b):\n    # Check the input shapes\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output tensor\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Calculate the grid size\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Extract the current program's block indices\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the offsets for the current block\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers for the current block\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator for the current block\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the current block from A and B with masking\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product for the current block\n        accumulator += tl.dot(a, b)\n\n        # Advance the pointers for the next iteration\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Calculate the output offset and store the result with masking\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    tl.store(c_ptrs, accumulator, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n\ndef matmul(a, b):\n    # Check the input shapes\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output tensor\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Calculate the grid size\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c",
    "operation": "matmul",
    "input_shapes": [
      [
        128,
        128
      ],
      [
        128,
        512
      ]
    ],
    "output_shape": [
      128,
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_PTR, B_PTR, C_PTR,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = A_PTR + offs_m[:, None] * stride_am + offs_k[None, :] * stride_ak\n    b_ptrs = B_PTR + offs_k[:, None] * stride_bk + offs_n[None, :] * stride_bn\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_PTR + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_PTR, B_PTR, C_PTR,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = A_PTR + offs_m[:, None] * stride_am + offs_k[None, :] * stride_ak\n    b_ptrs = B_PTR + offs_k[:, None] * stride_bk + offs_n[None, :] * stride_bn\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_PTR + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))",
    "operation": "matmul",
    "input_shapes": [
      [
        512,
        512
      ],
      [
        512,
        128
      ]
    ],
    "output_shape": [
      512,
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr = BLOCK_SIZE_M,\n    BLOCK_SIZE_N: tl.constexpr = BLOCK_SIZE_N,\n    BLOCK_SIZE_K: tl.constexpr = BLOCK_SIZE_K,\n):\n    # Program ID and grid coordinates\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate offsets for the current block\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Masking for edge cases\n    mask_m = offs_m[:, None] < M\n    mask_n = offs_n[None, :] < N\n\n    # Initialize accumulator for the current block\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Calculate current offsets in K dimension\n        offs_k_curr = k + offs_k\n\n        # Load A and B with masking for edge cases\n        a = tl.load(a_ptr + offs_m[:, None] * stride_am + offs_k_curr[None, :] * stride_ak, mask=mask_m & (offs_k_curr[None, :] < K))\n        b = tl.load(b_ptr + offs_k_curr[:, None] * stride_bk + offs_n[None, :] * stride_bn, mask=(offs_k_curr[:, None] < K) & mask_n)\n\n        # Perform dot product and accumulate\n        accumulator += tl.dot(a, b)\n\n    # Store the result with masking for edge cases\n    c = accumulator.to(tl.float16)  # Assuming output is float16\n    tl.store(c_ptr + offs_m[:, None] * stride_cm + offs_n[None, :] * stride_cn, c, mask=mask_m & mask_n)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr = BLOCK_SIZE_M,\n    BLOCK_SIZE_N: tl.constexpr = BLOCK_SIZE_N,\n    BLOCK_SIZE_K: tl.constexpr = BLOCK_SIZE_K,\n):\n    # Program ID and grid coordinates\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate offsets for the current block\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Masking for edge cases\n    mask_m = offs_m[:, None] < M\n    mask_n = offs_n[None, :] < N\n\n    # Initialize accumulator for the current block\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Calculate current offsets in K dimension\n        offs_k_curr = k + offs_k\n\n        # Load A and B with masking for edge cases\n        a = tl.load(a_ptr + offs_m[:, None] * stride_am + offs_k_curr[None, :] * stride_ak, mask=mask_m & (offs_k_curr[None, :] < K))\n        b = tl.load(b_ptr + offs_k_curr[:, None] * stride_bk + offs_n[None, :] * stride_bn, mask=(offs_k_curr[:, None] < K) & mask_n)\n\n        # Perform dot product and accumulate\n        accumulator += tl.dot(a, b)\n\n    # Store the result with masking for edge cases\n    c = accumulator.to(tl.float16)  # Assuming output is float16\n    tl.store(c_ptr + offs_m[:, None] * stride_cm + offs_n[None, :] * stride_cn, c, mask=mask_m & mask_n)",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        256
      ],
      [
        256,
        512
      ]
    ],
    "output_shape": [
      256,
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = A_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = B_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = A_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = B_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        128
      ],
      [
        128,
        512
      ]
    ],
    "output_shape": [
      256,
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate the block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A, B, and C\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    c = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the blocks of A and B\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product\n        c += tl.dot(a, b)\n\n        # Advance the pointers\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n\ndef matmul(a, b):\n    # Check the shapes of the input matrices\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output matrix\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Calculate the grid dimensions\n    grid_m = triton.cdiv(M, BLOCK_SIZE_M)\n    grid_n = triton.cdiv(N, BLOCK_SIZE_N)\n\n    # Launch the kernel\n    matmul_kernel[grid_m, grid_n](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n\n    return c\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate the block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A, B, and C\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    c = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the blocks of A and B\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product\n        c += tl.dot(a, b)\n\n        # Advance the pointers\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n\ndef matmul(a, b):\n    # Check the shapes of the input matrices\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output matrix\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Calculate the grid dimensions\n    grid_m = triton.cdiv(M, BLOCK_SIZE_M)\n    grid_n = triton.cdiv(N, BLOCK_SIZE_N)\n\n    # Launch the kernel\n    matmul_kernel[grid_m, grid_n](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n\n    return c",
    "operation": "matmul",
    "input_shapes": [
      [
        128,
        256
      ],
      [
        256,
        512
      ]
    ],
    "output_shape": [
      128,
      512
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define BLOCK_SIZE constants\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program IDs and TL constants\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate block IDs\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize accumulators\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Load a and b blocks\n    for k in range(0, K, BLOCK_SIZE_K):\n        a_ptrs = a_ptr + (offs_am[:, None] * stride_am + (k + offs_k[None, :]) * stride_ak)\n        b_ptrs = b_ptr + ((k + offs_k[:, None]) * stride_bk + offs_bn[None, :] * stride_bn)\n\n        # Load a and b with masking\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & ((k + offs_k[None, :]) < K), other=0.0)\n        b = tl.load(b_ptrs, mask=((k + offs_k[:, None]) < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform computation\n        accumulator += tl.dot(a, b)\n\n    # Store results\n    c_ptrs = c_ptr + (offs_am[:, None] * stride_cm + offs_bn[None, :] * stride_cn)\n    tl.store(c_ptrs, accumulator, mask=(offs_am[:, None] < M) & (offs_bn[None, :] < N))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define BLOCK_SIZE constants\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program IDs and TL constants\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate block IDs\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize accumulators\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Load a and b blocks\n    for k in range(0, K, BLOCK_SIZE_K):\n        a_ptrs = a_ptr + (offs_am[:, None] * stride_am + (k + offs_k[None, :]) * stride_ak)\n        b_ptrs = b_ptr + ((k + offs_k[:, None]) * stride_bk + offs_bn[None, :] * stride_bn)\n\n        # Load a and b with masking\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & ((k + offs_k[None, :]) < K), other=0.0)\n        b = tl.load(b_ptrs, mask=((k + offs_k[:, None]) < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform computation\n        accumulator += tl.dot(a, b)\n\n    # Store results\n    c_ptrs = c_ptr + (offs_am[:, None] * stride_cm + offs_bn[None, :] * stride_cn)\n    tl.store(c_ptrs, accumulator, mask=(offs_am[:, None] < M) & (offs_bn[None, :] < N))",
    "operation": "matmul",
    "input_shapes": [
      [
        512,
        256
      ],
      [
        256,
        128
      ]
    ],
    "output_shape": [
      512,
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and number of programs\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Compute the block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A, B, and C\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    c = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the blocks of A and B\n        a = tl.load(a_ptrs, mask=(offs_k[None, :] < K - k) & (offs_am[:, None] < M), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K - k) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product\n        c += tl.dot(a, b)\n\n        # Advance the pointers\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, c, mask=c_mask)\n\ndef matmul(a, b):\n    # Check the shapes of the input tensors\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output tensor\n    c = torch.empty((M, N), device=a.device, dtype=a.dtype)\n\n    # Define the grid dimensions\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and number of programs\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Compute the block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A, B, and C\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    c = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the blocks of A and B\n        a = tl.load(a_ptrs, mask=(offs_k[None, :] < K - k) & (offs_am[:, None] < M), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K - k) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product\n        c += tl.dot(a, b)\n\n        # Advance the pointers\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, c, mask=c_mask)\n\ndef matmul(a, b):\n    # Check the shapes of the input tensors\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output tensor\n    c = torch.empty((M, N), device=a.device, dtype=a.dtype)\n\n    # Define the grid dimensions\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        128
      ],
      [
        128,
        256
      ]
    ],
    "output_shape": [
      256,
      256
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = A_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = B_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator.to(C_ptr.dtype.element_ty)\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = A_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = B_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    c = accumulator.to(C_ptr.dtype.element_ty)\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = C_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, c, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        512
      ],
      [
        512,
        128
      ]
    ],
    "output_shape": [
      256,
      128
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Extract the current program ID\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A and B\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize the accumulator for the dot product\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the blocks of A and B\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product\n        accumulator += tl.dot(a, b)\n\n        # Move the pointers to the next blocks\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Calculate the output pointers\n    c_ptrs = c_ptr + (offs_am[:, None] * stride_cm + offs_bn[None, :] * stride_cn)\n\n    # Store the result\n    tl.store(c_ptrs, accumulator, mask=(offs_am[:, None] < M) & (offs_bn[None, :] < N))\n\ndef matmul(a, b):\n    # Check the shapes of the input tensors\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output tensor\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Calculate the grid size\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Extract the current program ID\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A and B\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize the accumulator for the dot product\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the blocks of A and B\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product\n        accumulator += tl.dot(a, b)\n\n        # Move the pointers to the next blocks\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Calculate the output pointers\n    c_ptrs = c_ptr + (offs_am[:, None] * stride_cm + offs_bn[None, :] * stride_cn)\n\n    # Store the result\n    tl.store(c_ptrs, accumulator, mask=(offs_am[:, None] < M) & (offs_bn[None, :] < N))\n\ndef matmul(a, b):\n    # Check the shapes of the input tensors\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate the output tensor\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # Calculate the grid size\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        128
      ],
      [
        128,
        128
      ]
    ],
    "output_shape": [
      256,
      128
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block IDs\n    block_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    block_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    # Initialize accumulators\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Load data in blocks\n    for k in range(0, K, BLOCK_SIZE_K):\n        block_k = k + tl.arange(0, BLOCK_SIZE_K)\n        mask_A = (block_m[:, None] < M) & (block_k[None, :] < K)\n        mask_B = (block_k[:, None] < K) & (block_n[None, :] < N)\n\n        # Load A and B with masking\n        A = tl.load(A_ptr + block_m[:, None] * stride_am + block_k[None, :] * stride_ak, mask=mask_A)\n        B = tl.load(B_ptr + block_k[:, None] * stride_bk + block_n[None, :] * stride_bn, mask=mask_B)\n\n        # Update accumulator\n        accumulator += tl.dot(A, B)\n\n    # Store result with masking\n    mask_C = (block_m[:, None] < M) & (block_n[None, :] < N)\n    tl.store(C_ptr + block_m[:, None] * stride_cm + block_n[None, :] * stride_cn, accumulator, mask=mask_C)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block IDs\n    block_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    block_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    # Initialize accumulators\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Load data in blocks\n    for k in range(0, K, BLOCK_SIZE_K):\n        block_k = k + tl.arange(0, BLOCK_SIZE_K)\n        mask_A = (block_m[:, None] < M) & (block_k[None, :] < K)\n        mask_B = (block_k[:, None] < K) & (block_n[None, :] < N)\n\n        # Load A and B with masking\n        A = tl.load(A_ptr + block_m[:, None] * stride_am + block_k[None, :] * stride_ak, mask=mask_A)\n        B = tl.load(B_ptr + block_k[:, None] * stride_bk + block_n[None, :] * stride_bn, mask=mask_B)\n\n        # Update accumulator\n        accumulator += tl.dot(A, B)\n\n    # Store result with masking\n    mask_C = (block_m[:, None] < M) & (block_n[None, :] < N)\n    tl.store(C_ptr + block_m[:, None] * stride_cm + block_n[None, :] * stride_cn, accumulator, mask=mask_C)",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        512
      ],
      [
        512,
        512
      ]
    ],
    "output_shape": [
      256,
      512
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    A_ptrs = A_ptr + offs_m[:, None] * stride_am + offs_k[None, :] * stride_ak\n    B_ptrs = B_ptr + offs_k[:, None] * stride_bk + offs_n[None, :] * stride_bn\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, K, BLOCK_SIZE_K):\n        A = tl.load(A_ptrs, mask=(offs_m[:, None] < M) & (offs_k[None, :] < K - k), other=0.0)\n        B = tl.load(B_ptrs, mask=(offs_k[:, None] < K - k) & (offs_n[None, :] < N), other=0.0)\n        accumulator += tl.dot(A, B)\n        A_ptrs += BLOCK_SIZE_K * stride_ak\n        B_ptrs += BLOCK_SIZE_K * stride_bk\n\n    C_ptrs = C_ptr + offs_m[:, None] * stride_cm + offs_n[None, :] * stride_cn\n    tl.store(C_ptrs, accumulator, mask=(offs_m[:, None] < M) & (offs_n[None, :] < N))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    A_ptrs = A_ptr + offs_m[:, None] * stride_am + offs_k[None, :] * stride_ak\n    B_ptrs = B_ptr + offs_k[:, None] * stride_bk + offs_n[None, :] * stride_bn\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, K, BLOCK_SIZE_K):\n        A = tl.load(A_ptrs, mask=(offs_m[:, None] < M) & (offs_k[None, :] < K - k), other=0.0)\n        B = tl.load(B_ptrs, mask=(offs_k[:, None] < K - k) & (offs_n[None, :] < N), other=0.0)\n        accumulator += tl.dot(A, B)\n        A_ptrs += BLOCK_SIZE_K * stride_ak\n        B_ptrs += BLOCK_SIZE_K * stride_bk\n\n    C_ptrs = C_ptr + offs_m[:, None] * stride_cm + offs_n[None, :] * stride_cn\n    tl.store(C_ptrs, accumulator, mask=(offs_m[:, None] < M) & (offs_n[None, :] < N))",
    "operation": "matmul",
    "input_shapes": [
      [
        128,
        512
      ],
      [
        512,
        256
      ]
    ],
    "output_shape": [
      128,
      256
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define BLOCK_SIZE constants\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr = BLOCK_SIZE_M,\n    BLOCK_SIZE_N: tl.constexpr = BLOCK_SIZE_N,\n    BLOCK_SIZE_K: tl.constexpr = BLOCK_SIZE_K,\n):\n    # Program ID and grid coordinates\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Compute matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K - k), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K - k) & (offs_bn[None, :] < N), other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, accumulator, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define BLOCK_SIZE constants\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak, \n    stride_bk, stride_bn, \n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr = BLOCK_SIZE_M,\n    BLOCK_SIZE_N: tl.constexpr = BLOCK_SIZE_N,\n    BLOCK_SIZE_K: tl.constexpr = BLOCK_SIZE_K,\n):\n    # Program ID and grid coordinates\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block offsets\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Compute matrix multiplication\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K - k), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K - k) & (offs_bn[None, :] < N), other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    tl.store(c_ptrs, accumulator, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))",
    "operation": "matmul",
    "input_shapes": [
      [
        128,
        128
      ],
      [
        128,
        256
      ]
    ],
    "output_shape": [
      128,
      256
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  }
]