[
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that performs element-wise divide of two 1D tensors of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    \n    # Avoid division by zero\n    y = tl.where(y == 0, tl.full_like(y, float('nan')), y)\n    \n    output = x / y\n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef element_wise_divide_kernel(\n    x_ptr, y_ptr, output_ptr, \n    N: tl.constexpr, \n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    \n    # Avoid division by zero\n    y = tl.where(y == 0, tl.full_like(y, float('nan')), y)\n    \n    output = x / y\n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "divide",
    "input_shapes": [
      [
        4096
      ],
      [
        4096
      ]
    ],
    "output_shape": [
      4096
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes relu of a 1D tensor of size N with efficient memory access patterns\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to make sure that we don't go out of bounds\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    \n    # Compute ReLU\n    output = tl.maximum(x, 0)\n    \n    # Store output\n    tl.store(output_ptr + offsets, output, mask=mask)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(\n    x_ptr,  # *Pointer* to input vector\n    output_ptr,  # *Pointer* to output vector\n    N,  # Size of the vector\n    BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process\n):\n    # We need to make sure that we don't go out of bounds\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    \n    # Load x\n    x = tl.load(x_ptr + offsets, mask=mask)\n    \n    # Compute ReLU\n    output = tl.maximum(x, 0)\n    \n    # Store output\n    tl.store(output_ptr + offsets, output, mask=mask)",
    "operation": "relu",
    "input_shapes": [
      [
        8192
      ]
    ],
    "output_shape": [
      8192
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes sigmoid of a 1D tensor of size N\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # * Pointer to input tensor\n    output_ptr,  # * Pointer to output tensor\n    N,  # * Size of the tensor\n    BLOCK_SIZE: tl.constexpr,  # * Block size for the kernel\n):\n    # Calculate the block index and the thread index within the block\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    # Load input data with masking for edge cases\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + tl.exp(-x))\n\n    # Store the result with masking for edge cases\n    tl.store(output_ptr + offsets, sigmoid_x, mask=mask)\n\ndef sigmoid(x):\n    N = x.numel()\n    output = torch.empty_like(x)\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    sigmoid_kernel[grid](x, output, N, BLOCK_SIZE=BLOCK_SIZE)\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(\n    x_ptr,  # * Pointer to input tensor\n    output_ptr,  # * Pointer to output tensor\n    N,  # * Size of the tensor\n    BLOCK_SIZE: tl.constexpr,  # * Block size for the kernel\n):\n    # Calculate the block index and the thread index within the block\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    # Load input data with masking for edge cases\n    mask = offsets < N\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + tl.exp(-x))\n\n    # Store the result with masking for edge cases\n    tl.store(output_ptr + offsets, sigmoid_x, mask=mask)\n\ndef sigmoid(x):\n    N = x.numel()\n    output = torch.empty_like(x)\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE']),)\n    sigmoid_kernel[grid](x, output, N, BLOCK_SIZE=BLOCK_SIZE)\n    return output",
    "operation": "sigmoid",
    "input_shapes": [
      [
        16384
      ]
    ],
    "output_shape": [
      16384
    ],
    "optimization_level": "none",
    "compiles": false,
    "error_message": "Triton compilation failed: 'function' object is not subscriptable"
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the max reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_input_M, \n    stride_input_N, \n    stride_output_M, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    col_block_idx = tl.program_id(1)\n\n    input_ptr = input_ptr + row_idx * stride_input_M + col_block_idx * BLOCK_SIZE_N * stride_input_N\n\n    max_val = tl.max(\n        tl.load(\n            input_ptr + tl.arange(0, BLOCK_SIZE_N) * stride_input_N, \n            mask=tl.arange(0, BLOCK_SIZE_N) + col_block_idx * BLOCK_SIZE_N < N, \n            other=float('-inf')\n        )\n    )\n\n    tl.store(output_ptr + row_idx * stride_output_M + col_block_idx, max_val)\n\n@triton.jit\ndef max_reduce_final_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_input_M, \n    stride_input_N, \n    stride_output_M, \n    BLOCK_SIZE_M: tl.constexpr\n):\n    row_block_idx = tl.program_id(0)\n\n    input_ptr = input_ptr + row_block_idx * BLOCK_SIZE_M * stride_input_M\n    output_ptr = output_ptr + row_block_idx * stride_output_M\n\n    max_val = tl.max(\n        tl.load(\n            input_ptr + tl.arange(0, BLOCK_SIZE_M) * stride_input_M, \n            mask=tl.arange(0, BLOCK_SIZE_M) + row_block_idx * BLOCK_SIZE_M < M, \n            other=float('-inf')\n        )\n    )\n\n    tl.store(output_ptr, max_val)\n\ndef max_reduce(input):\n    M, N = input.shape\n    output = torch.empty((M,), dtype=input.dtype, device=input.device)\n\n    BLOCK_SIZE_N = 256\n    grid = lambda meta: (M, triton.cdiv(N, meta['BLOCK_SIZE_N']))\n    max_reduce_kernel[grid](input, output, M, N, input.stride(0), input.stride(1), output.stride(0), BLOCK_SIZE_N=BLOCK_SIZE_N)\n\n    # For very large M, a second reduction kernel is needed\n    # For simplicity, this case is not handled here\n\n    return output\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_input_M, \n    stride_input_N, \n    stride_output_M, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    col_block_idx = tl.program_id(1)\n\n    input_ptr = input_ptr + row_idx * stride_input_M + col_block_idx * BLOCK_SIZE_N * stride_input_N\n\n    max_val = tl.max(\n        tl.load(\n            input_ptr + tl.arange(0, BLOCK_SIZE_N) * stride_input_N, \n            mask=tl.arange(0, BLOCK_SIZE_N) + col_block_idx * BLOCK_SIZE_N < N, \n            other=float('-inf')\n        )\n    )\n\n    tl.store(output_ptr + row_idx * stride_output_M + col_block_idx, max_val)\n\n@triton.jit\ndef max_reduce_final_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    stride_input_M, \n    stride_input_N, \n    stride_output_M, \n    BLOCK_SIZE_M: tl.constexpr\n):\n    row_block_idx = tl.program_id(0)\n\n    input_ptr = input_ptr + row_block_idx * BLOCK_SIZE_M * stride_input_M\n    output_ptr = output_ptr + row_block_idx * stride_output_M\n\n    max_val = tl.max(\n        tl.load(\n            input_ptr + tl.arange(0, BLOCK_SIZE_M) * stride_input_M, \n            mask=tl.arange(0, BLOCK_SIZE_M) + row_block_idx * BLOCK_SIZE_M < M, \n            other=float('-inf')\n        )\n    )\n\n    tl.store(output_ptr, max_val)\n\ndef max_reduce(input):\n    M, N = input.shape\n    output = torch.empty((M,), dtype=input.dtype, device=input.device)\n\n    BLOCK_SIZE_N = 256\n    grid = lambda meta: (M, triton.cdiv(N, meta['BLOCK_SIZE_N']))\n    max_reduce_kernel[grid](input, output, M, N, input.stride(0), input.stride(1), output.stride(0), BLOCK_SIZE_N=BLOCK_SIZE_N)\n\n    # For very large M, a second reduction kernel is needed\n    # For simplicity, this case is not handled here\n\n    return output",
    "operation": "max_reduction",
    "input_shapes": [
      [
        512,
        128
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": false,
    "error_message": "Triton compilation failed: 'function' object is not subscriptable"
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the max reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n    \n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    max_val = tl.where(offs_n < N, tl.load(input_ptr + offs_n), -float('inf'))\n    \n    for n_offset in range(BLOCK_SIZE_N, N, BLOCK_SIZE_N):\n        offs_n = n_offset + tl.arange(0, BLOCK_SIZE_N)\n        val = tl.where(offs_n < N, tl.load(input_ptr + offs_n), -float('inf'))\n        max_val = tl.maximum(max_val, val)\n    \n    tl.store(output_ptr, tl.max(max_val, axis=0))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef max_reduce_kernel(\n    input_ptr, \n    output_ptr, \n    M, \n    N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n    \n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    max_val = tl.where(offs_n < N, tl.load(input_ptr + offs_n), -float('inf'))\n    \n    for n_offset in range(BLOCK_SIZE_N, N, BLOCK_SIZE_N):\n        offs_n = n_offset + tl.arange(0, BLOCK_SIZE_N)\n        val = tl.where(offs_n < N, tl.load(input_ptr + offs_n), -float('inf'))\n        max_val = tl.maximum(max_val, val)\n    \n    tl.store(output_ptr, tl.max(max_val, axis=0))",
    "operation": "max_reduction",
    "input_shapes": [
      [
        512,
        256
      ]
    ],
    "output_shape": [
      512
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel that computes the sum reduction along the last dimension of a 2D tensor with shape [M, N]\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M, N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n    \n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    sum = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        sum += tl.load(input_ptr + offs_n, mask=mask, other=0.0)\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n    \n    sum = tl.sum(sum, axis=0)\n    tl.store(output_ptr, sum)\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_reduction_kernel(\n    input_ptr, output_ptr, \n    M, N, \n    BLOCK_SIZE_M: tl.constexpr, \n    BLOCK_SIZE_N: tl.constexpr\n):\n    pid_m = tl.program_id(axis=0)\n    input_ptr = input_ptr + pid_m * N\n    output_ptr = output_ptr + pid_m\n    \n    offs_n = tl.arange(0, BLOCK_SIZE_N)\n    sum = tl.zeros([BLOCK_SIZE_N], dtype=tl.float32)\n    for _ in range(tl.cdiv(N, BLOCK_SIZE_N)):\n        mask = offs_n < N\n        sum += tl.load(input_ptr + offs_n, mask=mask, other=0.0)\n        offs_n += BLOCK_SIZE_N\n        input_ptr += BLOCK_SIZE_N\n    \n    sum = tl.sum(sum, axis=0)\n    tl.store(output_ptr, sum)",
    "operation": "sum_reduction",
    "input_shapes": [
      [
        256,
        256
      ]
    ],
    "output_shape": [
      256
    ],
    "optimization_level": "none",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and number of programs\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the range of elements that this block will compute\n    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the first blocks of A and B\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator for the result\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load A and B blocks\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n\n        # Perform computation on the loaded blocks\n        accumulator += tl.dot(a, b)\n\n        # Advance pointers to the next blocks of A and B\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, accumulator, mask=c_mask)\n\ndef matmul(a, b):\n    # Check dimensions\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate output\n    c = torch.empty((M, N), device=a.device, dtype=a.dtype)\n\n    # 1D grid for matmul kernel\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and number of programs\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the range of elements that this block will compute\n    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the first blocks of A and B\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator for the result\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load A and B blocks\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k, other=0.0)\n\n        # Perform computation on the loaded blocks\n        accumulator += tl.dot(a, b)\n\n        # Advance pointers to the next blocks of A and B\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, accumulator, mask=c_mask)\n\ndef matmul(a, b):\n    # Check dimensions\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate output\n    c = torch.empty((M, N), device=a.device, dtype=a.dtype)\n\n    # 1D grid for matmul kernel\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        256
      ],
      [
        256,
        256
      ]
    ],
    "output_shape": [
      256,
      256
    ],
    "optimization_level": "basic",
    "compiles": false,
    "error_message": "Triton compilation failed: 'function' object is not subscriptable"
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 128\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block IDs\n    block_m = pid_m * BLOCK_SIZE_M\n    block_n = pid_n * BLOCK_SIZE_N\n\n    # Initialize pointers to A, B, and C\n    A_block_ptr = tl.make_block_ptr(\n        base=A_ptr, shape=(M, K), strides=(stride_am, stride_ak),\n        offsets=(block_m, 0), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_K), order=(1, 0)\n    )\n    B_block_ptr = tl.make_block_ptr(\n        base=B_ptr, shape=(K, N), strides=(stride_bk, stride_bn),\n        offsets=(0, block_n), block_shape=(BLOCK_SIZE_K, BLOCK_SIZE_N), order=(1, 0)\n    )\n    C = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform tile-based matrix multiplication\n    for _ in range(0, tl.cdiv(K, BLOCK_SIZE_K)):\n        A = tl.load(A_block_ptr, boundary_check=(0, 1))\n        B = tl.load(B_block_ptr, boundary_check=(0, 1))\n        C += tl.dot(A, B)\n        A_block_ptr = tl.advance(A_block_ptr, (0, BLOCK_SIZE_K))\n        B_block_ptr = tl.advance(B_block_ptr, (BLOCK_SIZE_K, 0))\n\n    # Store the result\n    C_block_ptr = tl.make_block_ptr(\n        base=C_ptr, shape=(M, N), strides=(stride_cm, stride_cn),\n        offsets=(block_m, block_n), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_N), order=(1, 0)\n    )\n    tl.store(C_block_ptr, C, boundary_check=(0, 1))\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 128\nBLOCK_SIZE_K = 32\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    **meta\n):\n    # Define program ID and grid dimensions\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    # Calculate block IDs\n    block_m = pid_m * BLOCK_SIZE_M\n    block_n = pid_n * BLOCK_SIZE_N\n\n    # Initialize pointers to A, B, and C\n    A_block_ptr = tl.make_block_ptr(\n        base=A_ptr, shape=(M, K), strides=(stride_am, stride_ak),\n        offsets=(block_m, 0), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_K), order=(1, 0)\n    )\n    B_block_ptr = tl.make_block_ptr(\n        base=B_ptr, shape=(K, N), strides=(stride_bk, stride_bn),\n        offsets=(0, block_n), block_shape=(BLOCK_SIZE_K, BLOCK_SIZE_N), order=(1, 0)\n    )\n    C = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Perform tile-based matrix multiplication\n    for _ in range(0, tl.cdiv(K, BLOCK_SIZE_K)):\n        A = tl.load(A_block_ptr, boundary_check=(0, 1))\n        B = tl.load(B_block_ptr, boundary_check=(0, 1))\n        C += tl.dot(A, B)\n        A_block_ptr = tl.advance(A_block_ptr, (0, BLOCK_SIZE_K))\n        B_block_ptr = tl.advance(B_block_ptr, (BLOCK_SIZE_K, 0))\n\n    # Store the result\n    C_block_ptr = tl.make_block_ptr(\n        base=C_ptr, shape=(M, N), strides=(stride_cm, stride_cn),\n        offsets=(block_m, block_n), block_shape=(BLOCK_SIZE_M, BLOCK_SIZE_N), order=(1, 0)\n    )\n    tl.store(C_block_ptr, C, boundary_check=(0, 1))",
    "operation": "matmul",
    "input_shapes": [
      [
        256,
        512
      ],
      [
        512,
        512
      ]
    ],
    "output_shape": [
      256,
      512
    ],
    "optimization_level": "basic",
    "compiles": true,
    "error_message": null
  },
  {
    "prompt": "You are an expert at writing high-performance Triton kernels.\n\nTask: Write a Triton kernel for matrix multiplication of tensors with shapes [M, K] and [K, N] using tile-based computation with shared memory\n\nRequirements:\n- Write clean, efficient Triton code\n- Include proper imports (triton, triton.language as tl)\n- Use appropriate BLOCK_SIZE constants\n- Handle edge cases with proper masking\n- Include the @triton.jit decorator\n\nProvide only the kernel code without explanation.",
    "response": "```python\nimport triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and number of programs\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the range of elements that this program is responsible for\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A and B\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator for the result\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the blocks of A and B\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product\n        accumulator += tl.dot(a, b)\n\n        # Advance the pointers to the next block\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    tl.store(c_ptrs, accumulator, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n\ndef matmul(a, b):\n    # Check if the shapes are compatible\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate output\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # 1D grid for matmul kernel\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c\n```",
    "kernel_code": "import triton\nimport triton.language as tl\n\n# Define constants for block sizes\nBLOCK_SIZE_M = 128\nBLOCK_SIZE_N = 256\nBLOCK_SIZE_K = 64\n\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # Strides\n    stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n):\n    # Program ID and number of programs\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n\n    # Calculate the range of elements that this program is responsible for\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    # Initialize pointers to the blocks of A and B\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # Initialize accumulator for the result\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Iterate over the K dimension\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Load the blocks of A and B\n        a = tl.load(a_ptrs, mask=(offs_am[:, None] < M) & (offs_k[None, :] < K), other=0.0)\n        b = tl.load(b_ptrs, mask=(offs_k[:, None] < K) & (offs_bn[None, :] < N), other=0.0)\n\n        # Perform the dot product\n        accumulator += tl.dot(a, b)\n\n        # Advance the pointers to the next block\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    # Store the result\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    tl.store(c_ptrs, accumulator, mask=(offs_cm[:, None] < M) & (offs_cn[None, :] < N))\n\ndef matmul(a, b):\n    # Check if the shapes are compatible\n    assert a.shape[1] == b.shape[0]\n    M, K = a.shape\n    K, N = b.shape\n\n    # Allocate output\n    c = torch.empty((M, N), device=a.device, dtype=torch.float32)\n\n    # 1D grid for matmul kernel\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']),\n        triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n\n    # Launch the kernel\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1), b.stride(0), b.stride(1), c.stride(0), c.stride(1),\n        BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,\n    )\n    return c",
    "operation": "matmul",
    "input_shapes": [
      [
        128,
        128
      ],
      [
        128,
        256
      ]
    ],
    "output_shape": [
      128,
      256
    ],
    "optimization_level": "basic",
    "compiles": false,
    "error_message": "Triton compilation failed: 'function' object is not subscriptable"
  }
]